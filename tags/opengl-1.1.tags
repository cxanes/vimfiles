!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
APIENTRY	GL/glut.h	151;"	d
APIENTRY	GL/glut.h	24;"	d
APIENTRY	GL/glut.h	26;"	d
APIENTRY	GL/glut.h	698;"	d
AUXEXPOSEPROC	GL/glaux.h	/^typedef void (CALLBACK* AUXEXPOSEPROC)(int, int);$/;"	t
AUXIDLEPROC	GL/glaux.h	/^typedef void (CALLBACK* AUXIDLEPROC)(void);$/;"	t
AUXKEYPROC	GL/glaux.h	/^typedef void (CALLBACK* AUXKEYPROC)(void);$/;"	t
AUXMAINPROC	GL/glaux.h	/^typedef void (CALLBACK* AUXMAINPROC)(void);$/;"	t
AUXMOUSEPROC	GL/glaux.h	/^typedef void (CALLBACK* AUXMOUSEPROC)(AUX_EVENTREC *);$/;"	t
AUXRESHAPEPROC	GL/glaux.h	/^typedef void (CALLBACK* AUXRESHAPEPROC)(GLsizei, GLsizei);$/;"	t
AUX_0	GL/glaux.h	204;"	d
AUX_1	GL/glaux.h	205;"	d
AUX_2	GL/glaux.h	206;"	d
AUX_3	GL/glaux.h	207;"	d
AUX_4	GL/glaux.h	208;"	d
AUX_5	GL/glaux.h	209;"	d
AUX_6	GL/glaux.h	210;"	d
AUX_7	GL/glaux.h	211;"	d
AUX_8	GL/glaux.h	212;"	d
AUX_9	GL/glaux.h	213;"	d
AUX_A	GL/glaux.h	152;"	d
AUX_ACCUM	GL/glaux.h	77;"	d
AUX_ALPHA	GL/glaux.h	78;"	d
AUX_AUX	GL/glaux.h	81;"	d
AUX_B	GL/glaux.h	153;"	d
AUX_BLACK	GL/glaux.h	228;"	d
AUX_BLUE	GL/glaux.h	232;"	d
AUX_C	GL/glaux.h	154;"	d
AUX_COLORMAP	GL/glaux.h	219;"	d
AUX_CONFIG	GL/glaux.h	115;"	d
AUX_CONTROL	GL/glaux.h	140;"	d
AUX_CYAN	GL/glaux.h	234;"	d
AUX_D	GL/glaux.h	155;"	d
AUX_DEPTH	GL/glaux.h	84;"	d
AUX_DEPTH16	GL/glaux.h	82;"	d
AUX_DEPTH24	GL/glaux.h	79;"	d
AUX_DIRECT	GL/glaux.h	74;"	d
AUX_DOUBLE	GL/glaux.h	73;"	d
AUX_DOWN	GL/glaux.h	151;"	d
AUX_DRAW	GL/glaux.h	116;"	d
AUX_E	GL/glaux.h	156;"	d
AUX_ESCAPE	GL/glaux.h	146;"	d
AUX_EVENTREC	GL/glaux.h	/^} AUX_EVENTREC;$/;"	t	typeref:struct:_AUX_EVENTREC
AUX_EXACT_MATCH	GL/glaux.h	/^    AUX_EXACT_MATCH,$/;"	e	enum:__anon1
AUX_EXPOSE	GL/glaux.h	114;"	d
AUX_F	GL/glaux.h	157;"	d
AUX_FD	GL/glaux.h	218;"	d
AUX_FIXED_332_PAL	GL/glaux.h	83;"	d
AUX_FOGMAP	GL/glaux.h	221;"	d
AUX_G	GL/glaux.h	158;"	d
AUX_GREEN	GL/glaux.h	230;"	d
AUX_GREYSCALEMAP	GL/glaux.h	220;"	d
AUX_H	GL/glaux.h	159;"	d
AUX_I	GL/glaux.h	160;"	d
AUX_INDEX	GL/glaux.h	71;"	d
AUX_INDIRECT	GL/glaux.h	75;"	d
AUX_J	GL/glaux.h	161;"	d
AUX_K	GL/glaux.h	162;"	d
AUX_KEY	GL/glaux.h	130;"	d
AUX_KEYEVENT	GL/glaux.h	117;"	d
AUX_KEYSTATUS	GL/glaux.h	131;"	d
AUX_L	GL/glaux.h	163;"	d
AUX_LEFT	GL/glaux.h	148;"	d
AUX_LEFTBUTTON	GL/glaux.h	136;"	d
AUX_M	GL/glaux.h	164;"	d
AUX_MAGENTA	GL/glaux.h	233;"	d
AUX_MIDDLEBUTTON	GL/glaux.h	138;"	d
AUX_MINIMUM_CRITERIA	GL/glaux.h	/^    AUX_MINIMUM_CRITERIA$/;"	e	enum:__anon1
AUX_MOUSEDOWN	GL/glaux.h	118;"	d
AUX_MOUSELOC	GL/glaux.h	120;"	d
AUX_MOUSESTATUS	GL/glaux.h	129;"	d
AUX_MOUSEUP	GL/glaux.h	119;"	d
AUX_MOUSEX	GL/glaux.h	127;"	d
AUX_MOUSEY	GL/glaux.h	128;"	d
AUX_N	GL/glaux.h	165;"	d
AUX_O	GL/glaux.h	166;"	d
AUX_ONECOLOR	GL/glaux.h	222;"	d
AUX_P	GL/glaux.h	167;"	d
AUX_Q	GL/glaux.h	168;"	d
AUX_R	GL/glaux.h	169;"	d
AUX_RED	GL/glaux.h	229;"	d
AUX_RETURN	GL/glaux.h	145;"	d
AUX_RGB	GL/glaux.h	69;"	d
AUX_RGBA	GL/glaux.h	70;"	d
AUX_RGBImageRec	GL/glaux.h	/^} AUX_RGBImageRec;$/;"	t	typeref:struct:_AUX_RGBImageRec
AUX_RIGHT	GL/glaux.h	150;"	d
AUX_RIGHTBUTTON	GL/glaux.h	137;"	d
AUX_S	GL/glaux.h	170;"	d
AUX_SETCOLOR	GL/glaux.h	239;"	d
AUX_SHIFT	GL/glaux.h	139;"	d
AUX_SINGLE	GL/glaux.h	72;"	d
AUX_SPACE	GL/glaux.h	147;"	d
AUX_STENCIL	GL/glaux.h	80;"	d
AUX_T	GL/glaux.h	171;"	d
AUX_U	GL/glaux.h	172;"	d
AUX_UP	GL/glaux.h	149;"	d
AUX_USE_ID	GL/glaux.h	/^    AUX_USE_ID = 1,$/;"	e	enum:__anon1
AUX_V	GL/glaux.h	173;"	d
AUX_W	GL/glaux.h	174;"	d
AUX_WHITE	GL/glaux.h	235;"	d
AUX_WINDOWX	GL/glaux.h	125;"	d
AUX_WINDOWY	GL/glaux.h	126;"	d
AUX_WIND_HAS_ACCUM	GL/glaux.h	96;"	d
AUX_WIND_HAS_ALPHA	GL/glaux.h	97;"	d
AUX_WIND_HAS_DEPTH	GL/glaux.h	98;"	d
AUX_WIND_HAS_STENCIL	GL/glaux.h	99;"	d
AUX_WIND_IS_DIRECT	GL/glaux.h	95;"	d
AUX_WIND_IS_DOUBLE	GL/glaux.h	93;"	d
AUX_WIND_IS_INDEX	GL/glaux.h	91;"	d
AUX_WIND_IS_INDIRECT	GL/glaux.h	94;"	d
AUX_WIND_IS_RGB	GL/glaux.h	90;"	d
AUX_WIND_IS_SINGLE	GL/glaux.h	92;"	d
AUX_WIND_USES_FIXED_332_PAL	GL/glaux.h	100;"	d
AUX_X	GL/glaux.h	175;"	d
AUX_Y	GL/glaux.h	176;"	d
AUX_YELLOW	GL/glaux.h	231;"	d
AUX_Z	GL/glaux.h	177;"	d
AUX_a	GL/glaux.h	178;"	d
AUX_b	GL/glaux.h	179;"	d
AUX_c	GL/glaux.h	180;"	d
AUX_d	GL/glaux.h	181;"	d
AUX_e	GL/glaux.h	182;"	d
AUX_f	GL/glaux.h	183;"	d
AUX_g	GL/glaux.h	184;"	d
AUX_h	GL/glaux.h	185;"	d
AUX_i	GL/glaux.h	186;"	d
AUX_j	GL/glaux.h	187;"	d
AUX_k	GL/glaux.h	188;"	d
AUX_l	GL/glaux.h	189;"	d
AUX_m	GL/glaux.h	190;"	d
AUX_n	GL/glaux.h	191;"	d
AUX_o	GL/glaux.h	192;"	d
AUX_p	GL/glaux.h	193;"	d
AUX_q	GL/glaux.h	194;"	d
AUX_r	GL/glaux.h	195;"	d
AUX_s	GL/glaux.h	196;"	d
AUX_t	GL/glaux.h	197;"	d
AUX_u	GL/glaux.h	198;"	d
AUX_v	GL/glaux.h	199;"	d
AUX_w	GL/glaux.h	200;"	d
AUX_x	GL/glaux.h	201;"	d
AUX_y	GL/glaux.h	202;"	d
AUX_z	GL/glaux.h	203;"	d
CALLBACK	GL/glut.h	153;"	d
CALLBACK	GL/glut.h	32;"	d
CALLBACK	GL/glut.h	34;"	d
GLUTAPI	GL/glut.h	123;"	d
GLUTAPI	GL/glut.h	126;"	d
GLUTAPI	GL/glut.h	128;"	d
GLUTAPI	GL/glut.h	155;"	d
GLUTCALLBACK	GL/glut.h	133;"	d
GLUTCALLBACK	GL/glut.h	156;"	d
GLUT_ACCUM	GL/glut.h	232;"	d
GLUT_ACTIVE_ALT	GL/glut.h	446;"	d
GLUT_ACTIVE_CTRL	GL/glut.h	445;"	d
GLUT_ACTIVE_SHIFT	GL/glut.h	444;"	d
GLUT_ALPHA	GL/glut.h	233;"	d
GLUT_APIENTRY_DEFINED	GL/glut.h	152;"	d
GLUT_APIENTRY_DEFINED	GL/glut.h	22;"	d
GLUT_APIENTRY_DEFINED	GL/glut.h	697;"	d
GLUT_API_VERSION	GL/glut.h	183;"	d
GLUT_BITMAP_8_BY_13	GL/glut.h	309;"	d
GLUT_BITMAP_8_BY_13	GL/glut.h	337;"	d
GLUT_BITMAP_9_BY_15	GL/glut.h	308;"	d
GLUT_BITMAP_9_BY_15	GL/glut.h	336;"	d
GLUT_BITMAP_HELVETICA_10	GL/glut.h	313;"	d
GLUT_BITMAP_HELVETICA_10	GL/glut.h	341;"	d
GLUT_BITMAP_HELVETICA_12	GL/glut.h	314;"	d
GLUT_BITMAP_HELVETICA_12	GL/glut.h	342;"	d
GLUT_BITMAP_HELVETICA_18	GL/glut.h	315;"	d
GLUT_BITMAP_HELVETICA_18	GL/glut.h	343;"	d
GLUT_BITMAP_TIMES_ROMAN_10	GL/glut.h	310;"	d
GLUT_BITMAP_TIMES_ROMAN_10	GL/glut.h	338;"	d
GLUT_BITMAP_TIMES_ROMAN_24	GL/glut.h	311;"	d
GLUT_BITMAP_TIMES_ROMAN_24	GL/glut.h	339;"	d
GLUT_BLUE	GL/glut.h	300;"	d
GLUT_CURSOR_BOTTOM_LEFT_CORNER	GL/glut.h	472;"	d
GLUT_CURSOR_BOTTOM_RIGHT_CORNER	GL/glut.h	471;"	d
GLUT_CURSOR_BOTTOM_SIDE	GL/glut.h	466;"	d
GLUT_CURSOR_CROSSHAIR	GL/glut.h	460;"	d
GLUT_CURSOR_CYCLE	GL/glut.h	456;"	d
GLUT_CURSOR_DESTROY	GL/glut.h	454;"	d
GLUT_CURSOR_FULL_CROSSHAIR	GL/glut.h	478;"	d
GLUT_CURSOR_HELP	GL/glut.h	455;"	d
GLUT_CURSOR_INFO	GL/glut.h	453;"	d
GLUT_CURSOR_INHERIT	GL/glut.h	474;"	d
GLUT_CURSOR_LEFT_ARROW	GL/glut.h	451;"	d
GLUT_CURSOR_LEFT_RIGHT	GL/glut.h	463;"	d
GLUT_CURSOR_LEFT_SIDE	GL/glut.h	467;"	d
GLUT_CURSOR_NONE	GL/glut.h	476;"	d
GLUT_CURSOR_RIGHT_ARROW	GL/glut.h	450;"	d
GLUT_CURSOR_RIGHT_SIDE	GL/glut.h	468;"	d
GLUT_CURSOR_SPRAY	GL/glut.h	457;"	d
GLUT_CURSOR_TEXT	GL/glut.h	459;"	d
GLUT_CURSOR_TOP_LEFT_CORNER	GL/glut.h	469;"	d
GLUT_CURSOR_TOP_RIGHT_CORNER	GL/glut.h	470;"	d
GLUT_CURSOR_TOP_SIDE	GL/glut.h	465;"	d
GLUT_CURSOR_UP_DOWN	GL/glut.h	462;"	d
GLUT_CURSOR_WAIT	GL/glut.h	458;"	d
GLUT_DEFINED__CRTIMP	GL/glut.h	118;"	d
GLUT_DEFINED__CRTIMP	GL/glut.h	712;"	d
GLUT_DEFINED___CDECL	GL/glut.h	104;"	d
GLUT_DEFINED___CDECL	GL/glut.h	707;"	d
GLUT_DEPTH	GL/glut.h	234;"	d
GLUT_DEVICE_IGNORE_KEY_REPEAT	GL/glut.h	407;"	d
GLUT_DEVICE_KEY_REPEAT	GL/glut.h	408;"	d
GLUT_DISPLAY_MODE_POSSIBLE	GL/glut.h	380;"	d
GLUT_DOUBLE	GL/glut.h	231;"	d
GLUT_DOWN	GL/glut.h	250;"	d
GLUT_ELAPSED_TIME	GL/glut.h	387;"	d
GLUT_ENTERED	GL/glut.h	281;"	d
GLUT_FULLY_COVERED	GL/glut.h	295;"	d
GLUT_FULLY_RETAINED	GL/glut.h	293;"	d
GLUT_GAME_MODE_ACTIVE	GL/glut.h	677;"	d
GLUT_GAME_MODE_DISPLAY_CHANGED	GL/glut.h	683;"	d
GLUT_GAME_MODE_HEIGHT	GL/glut.h	680;"	d
GLUT_GAME_MODE_PIXEL_DEPTH	GL/glut.h	681;"	d
GLUT_GAME_MODE_POSSIBLE	GL/glut.h	678;"	d
GLUT_GAME_MODE_REFRESH_RATE	GL/glut.h	682;"	d
GLUT_GAME_MODE_WIDTH	GL/glut.h	679;"	d
GLUT_GREEN	GL/glut.h	299;"	d
GLUT_HAS_DIAL_AND_BUTTON_BOX	GL/glut.h	398;"	d
GLUT_HAS_JOYSTICK	GL/glut.h	409;"	d
GLUT_HAS_KEYBOARD	GL/glut.h	395;"	d
GLUT_HAS_MOUSE	GL/glut.h	396;"	d
GLUT_HAS_OVERLAY	GL/glut.h	420;"	d
GLUT_HAS_SPACEBALL	GL/glut.h	397;"	d
GLUT_HAS_TABLET	GL/glut.h	399;"	d
GLUT_HIDDEN	GL/glut.h	292;"	d
GLUT_INDEX	GL/glut.h	229;"	d
GLUT_INIT_DISPLAY_MODE	GL/glut.h	385;"	d
GLUT_INIT_WINDOW_HEIGHT	GL/glut.h	384;"	d
GLUT_INIT_WINDOW_WIDTH	GL/glut.h	383;"	d
GLUT_INIT_WINDOW_X	GL/glut.h	381;"	d
GLUT_INIT_WINDOW_Y	GL/glut.h	382;"	d
GLUT_JOYSTICK_AXES	GL/glut.h	412;"	d
GLUT_JOYSTICK_BUTTONS	GL/glut.h	411;"	d
GLUT_JOYSTICK_BUTTON_A	GL/glut.h	666;"	d
GLUT_JOYSTICK_BUTTON_B	GL/glut.h	667;"	d
GLUT_JOYSTICK_BUTTON_C	GL/glut.h	668;"	d
GLUT_JOYSTICK_BUTTON_D	GL/glut.h	669;"	d
GLUT_JOYSTICK_POLL_RATE	GL/glut.h	413;"	d
GLUT_KEY_DOWN	GL/glut.h	271;"	d
GLUT_KEY_END	GL/glut.h	275;"	d
GLUT_KEY_F1	GL/glut.h	255;"	d
GLUT_KEY_F10	GL/glut.h	264;"	d
GLUT_KEY_F11	GL/glut.h	265;"	d
GLUT_KEY_F12	GL/glut.h	266;"	d
GLUT_KEY_F2	GL/glut.h	256;"	d
GLUT_KEY_F3	GL/glut.h	257;"	d
GLUT_KEY_F4	GL/glut.h	258;"	d
GLUT_KEY_F5	GL/glut.h	259;"	d
GLUT_KEY_F6	GL/glut.h	260;"	d
GLUT_KEY_F7	GL/glut.h	261;"	d
GLUT_KEY_F8	GL/glut.h	262;"	d
GLUT_KEY_F9	GL/glut.h	263;"	d
GLUT_KEY_HOME	GL/glut.h	274;"	d
GLUT_KEY_INSERT	GL/glut.h	276;"	d
GLUT_KEY_LEFT	GL/glut.h	268;"	d
GLUT_KEY_PAGE_DOWN	GL/glut.h	273;"	d
GLUT_KEY_PAGE_UP	GL/glut.h	272;"	d
GLUT_KEY_REPEAT_DEFAULT	GL/glut.h	663;"	d
GLUT_KEY_REPEAT_OFF	GL/glut.h	661;"	d
GLUT_KEY_REPEAT_ON	GL/glut.h	662;"	d
GLUT_KEY_RIGHT	GL/glut.h	270;"	d
GLUT_KEY_UP	GL/glut.h	269;"	d
GLUT_LAYER_IN_USE	GL/glut.h	419;"	d
GLUT_LEFT	GL/glut.h	280;"	d
GLUT_LEFT_BUTTON	GL/glut.h	245;"	d
GLUT_LUMINANCE	GL/glut.h	241;"	d
GLUT_MENU_IN_USE	GL/glut.h	285;"	d
GLUT_MENU_NOT_IN_USE	GL/glut.h	284;"	d
GLUT_MENU_NUM_ITEMS	GL/glut.h	379;"	d
GLUT_MIDDLE_BUTTON	GL/glut.h	246;"	d
GLUT_MULTISAMPLE	GL/glut.h	237;"	d
GLUT_NORMAL	GL/glut.h	440;"	d
GLUT_NORMAL_DAMAGED	GL/glut.h	422;"	d
GLUT_NOT_VISIBLE	GL/glut.h	288;"	d
GLUT_NUM_BUTTON_BOX_BUTTONS	GL/glut.h	402;"	d
GLUT_NUM_DIALS	GL/glut.h	403;"	d
GLUT_NUM_MOUSE_BUTTONS	GL/glut.h	400;"	d
GLUT_NUM_SPACEBALL_BUTTONS	GL/glut.h	401;"	d
GLUT_NUM_TABLET_BUTTONS	GL/glut.h	404;"	d
GLUT_OVERLAY	GL/glut.h	441;"	d
GLUT_OVERLAY_DAMAGED	GL/glut.h	423;"	d
GLUT_OVERLAY_POSSIBLE	GL/glut.h	418;"	d
GLUT_OWNS_JOYSTICK	GL/glut.h	410;"	d
GLUT_PARTIALLY_RETAINED	GL/glut.h	294;"	d
GLUT_RED	GL/glut.h	298;"	d
GLUT_RGB	GL/glut.h	227;"	d
GLUT_RGBA	GL/glut.h	228;"	d
GLUT_RIGHT_BUTTON	GL/glut.h	247;"	d
GLUT_SCREEN_HEIGHT	GL/glut.h	376;"	d
GLUT_SCREEN_HEIGHT_MM	GL/glut.h	378;"	d
GLUT_SCREEN_WIDTH	GL/glut.h	375;"	d
GLUT_SCREEN_WIDTH_MM	GL/glut.h	377;"	d
GLUT_SINGLE	GL/glut.h	230;"	d
GLUT_STENCIL	GL/glut.h	235;"	d
GLUT_STEREO	GL/glut.h	238;"	d
GLUT_STROKE_MONO_ROMAN	GL/glut.h	305;"	d
GLUT_STROKE_MONO_ROMAN	GL/glut.h	324;"	d
GLUT_STROKE_ROMAN	GL/glut.h	304;"	d
GLUT_STROKE_ROMAN	GL/glut.h	323;"	d
GLUT_TRANSPARENT_INDEX	GL/glut.h	421;"	d
GLUT_UP	GL/glut.h	251;"	d
GLUT_VIDEO_RESIZE_HEIGHT	GL/glut.h	436;"	d
GLUT_VIDEO_RESIZE_HEIGHT_DELTA	GL/glut.h	432;"	d
GLUT_VIDEO_RESIZE_IN_USE	GL/glut.h	428;"	d
GLUT_VIDEO_RESIZE_POSSIBLE	GL/glut.h	427;"	d
GLUT_VIDEO_RESIZE_WIDTH	GL/glut.h	435;"	d
GLUT_VIDEO_RESIZE_WIDTH_DELTA	GL/glut.h	431;"	d
GLUT_VIDEO_RESIZE_X	GL/glut.h	433;"	d
GLUT_VIDEO_RESIZE_X_DELTA	GL/glut.h	429;"	d
GLUT_VIDEO_RESIZE_Y	GL/glut.h	434;"	d
GLUT_VIDEO_RESIZE_Y_DELTA	GL/glut.h	430;"	d
GLUT_VISIBLE	GL/glut.h	289;"	d
GLUT_WINDOW_ACCUM_ALPHA_SIZE	GL/glut.h	362;"	d
GLUT_WINDOW_ACCUM_BLUE_SIZE	GL/glut.h	361;"	d
GLUT_WINDOW_ACCUM_GREEN_SIZE	GL/glut.h	360;"	d
GLUT_WINDOW_ACCUM_RED_SIZE	GL/glut.h	359;"	d
GLUT_WINDOW_ALPHA_SIZE	GL/glut.h	358;"	d
GLUT_WINDOW_BLUE_SIZE	GL/glut.h	357;"	d
GLUT_WINDOW_BUFFER_SIZE	GL/glut.h	352;"	d
GLUT_WINDOW_COLORMAP_SIZE	GL/glut.h	367;"	d
GLUT_WINDOW_CURSOR	GL/glut.h	373;"	d
GLUT_WINDOW_DEPTH_SIZE	GL/glut.h	354;"	d
GLUT_WINDOW_DOUBLEBUFFER	GL/glut.h	363;"	d
GLUT_WINDOW_FORMAT_ID	GL/glut.h	390;"	d
GLUT_WINDOW_GREEN_SIZE	GL/glut.h	356;"	d
GLUT_WINDOW_HEIGHT	GL/glut.h	351;"	d
GLUT_WINDOW_NUM_CHILDREN	GL/glut.h	366;"	d
GLUT_WINDOW_NUM_SAMPLES	GL/glut.h	369;"	d
GLUT_WINDOW_PARENT	GL/glut.h	365;"	d
GLUT_WINDOW_RED_SIZE	GL/glut.h	355;"	d
GLUT_WINDOW_RGBA	GL/glut.h	364;"	d
GLUT_WINDOW_STENCIL_SIZE	GL/glut.h	353;"	d
GLUT_WINDOW_STEREO	GL/glut.h	370;"	d
GLUT_WINDOW_WIDTH	GL/glut.h	350;"	d
GLUT_WINDOW_X	GL/glut.h	348;"	d
GLUT_WINDOW_Y	GL/glut.h	349;"	d
GLUT_WINGDIAPI_DEFINED	GL/glut.h	44;"	d
GLUT_WINGDIAPI_DEFINED	GL/glut.h	702;"	d
GLUT_XLIB_IMPLEMENTATION	GL/glut.h	223;"	d
GLU_AUTO_LOAD_MATRIX	GL/glu.h	490;"	d
GLU_BEGIN	GL/glu.h	573;"	d
GLU_CCW	GL/glu.h	567;"	d
GLU_CULLING	GL/glu.h	491;"	d
GLU_CW	GL/glu.h	566;"	d
GLU_DISPLAY_MODE	GL/glu.h	493;"	d
GLU_DOMAIN_DISTANCE	GL/glu.h	502;"	d
GLU_EDGE_FLAG	GL/glu.h	577;"	d
GLU_END	GL/glu.h	575;"	d
GLU_ERROR	GL/glu.h	576;"	d
GLU_EXTENSIONS	GL/glu.h	401;"	d
GLU_EXTERIOR	GL/glu.h	569;"	d
GLU_FALSE	GL/glu.h	405;"	d
GLU_FILL	GL/glu.h	418;"	d
GLU_FLAT	GL/glu.h	412;"	d
GLU_INCOMPATIBLE_GL_VERSION	GL/glu.h	397;"	d
GLU_INSIDE	GL/glu.h	423;"	d
GLU_INTERIOR	GL/glu.h	568;"	d
GLU_INVALID_ENUM	GL/glu.h	394;"	d
GLU_INVALID_VALUE	GL/glu.h	395;"	d
GLU_LINE	GL/glu.h	417;"	d
GLU_MAP1_TRIM_2	GL/glu.h	506;"	d
GLU_MAP1_TRIM_3	GL/glu.h	507;"	d
GLU_NONE	GL/glu.h	413;"	d
GLU_NURBS_ERROR1	GL/glu.h	518;"	d
GLU_NURBS_ERROR10	GL/glu.h	527;"	d
GLU_NURBS_ERROR11	GL/glu.h	528;"	d
GLU_NURBS_ERROR12	GL/glu.h	529;"	d
GLU_NURBS_ERROR13	GL/glu.h	530;"	d
GLU_NURBS_ERROR14	GL/glu.h	531;"	d
GLU_NURBS_ERROR15	GL/glu.h	532;"	d
GLU_NURBS_ERROR16	GL/glu.h	533;"	d
GLU_NURBS_ERROR17	GL/glu.h	534;"	d
GLU_NURBS_ERROR18	GL/glu.h	535;"	d
GLU_NURBS_ERROR19	GL/glu.h	536;"	d
GLU_NURBS_ERROR2	GL/glu.h	519;"	d
GLU_NURBS_ERROR20	GL/glu.h	537;"	d
GLU_NURBS_ERROR21	GL/glu.h	538;"	d
GLU_NURBS_ERROR22	GL/glu.h	539;"	d
GLU_NURBS_ERROR23	GL/glu.h	540;"	d
GLU_NURBS_ERROR24	GL/glu.h	541;"	d
GLU_NURBS_ERROR25	GL/glu.h	542;"	d
GLU_NURBS_ERROR26	GL/glu.h	543;"	d
GLU_NURBS_ERROR27	GL/glu.h	544;"	d
GLU_NURBS_ERROR28	GL/glu.h	545;"	d
GLU_NURBS_ERROR29	GL/glu.h	546;"	d
GLU_NURBS_ERROR3	GL/glu.h	520;"	d
GLU_NURBS_ERROR30	GL/glu.h	547;"	d
GLU_NURBS_ERROR31	GL/glu.h	548;"	d
GLU_NURBS_ERROR32	GL/glu.h	549;"	d
GLU_NURBS_ERROR33	GL/glu.h	550;"	d
GLU_NURBS_ERROR34	GL/glu.h	551;"	d
GLU_NURBS_ERROR35	GL/glu.h	552;"	d
GLU_NURBS_ERROR36	GL/glu.h	553;"	d
GLU_NURBS_ERROR37	GL/glu.h	554;"	d
GLU_NURBS_ERROR4	GL/glu.h	521;"	d
GLU_NURBS_ERROR5	GL/glu.h	522;"	d
GLU_NURBS_ERROR6	GL/glu.h	523;"	d
GLU_NURBS_ERROR7	GL/glu.h	524;"	d
GLU_NURBS_ERROR8	GL/glu.h	525;"	d
GLU_NURBS_ERROR9	GL/glu.h	526;"	d
GLU_OUTLINE_PATCH	GL/glu.h	512;"	d
GLU_OUTLINE_POLYGON	GL/glu.h	511;"	d
GLU_OUTSIDE	GL/glu.h	422;"	d
GLU_OUT_OF_MEMORY	GL/glu.h	396;"	d
GLU_PARAMETRIC_ERROR	GL/glu.h	501;"	d
GLU_PARAMETRIC_TOLERANCE	GL/glu.h	494;"	d
GLU_PATH_LENGTH	GL/glu.h	500;"	d
GLU_POINT	GL/glu.h	416;"	d
GLU_SAMPLING_METHOD	GL/glu.h	495;"	d
GLU_SAMPLING_TOLERANCE	GL/glu.h	492;"	d
GLU_SILHOUETTE	GL/glu.h	419;"	d
GLU_SMOOTH	GL/glu.h	411;"	d
GLU_TESS_BEGIN	GL/glu.h	446;"	d
GLU_TESS_BEGIN_DATA	GL/glu.h	455;"	d
GLU_TESS_BOUNDARY_ONLY	GL/glu.h	435;"	d
GLU_TESS_COMBINE	GL/glu.h	451;"	d
GLU_TESS_COMBINE_DATA	GL/glu.h	464;"	d
GLU_TESS_COORD_TOO_LARGE	GL/glu.h	484;"	d
GLU_TESS_EDGE_FLAG	GL/glu.h	450;"	d
GLU_TESS_EDGE_FLAG_DATA	GL/glu.h	462;"	d
GLU_TESS_END	GL/glu.h	448;"	d
GLU_TESS_END_DATA	GL/glu.h	459;"	d
GLU_TESS_ERROR	GL/glu.h	449;"	d
GLU_TESS_ERROR1	GL/glu.h	471;"	d
GLU_TESS_ERROR2	GL/glu.h	472;"	d
GLU_TESS_ERROR3	GL/glu.h	473;"	d
GLU_TESS_ERROR4	GL/glu.h	474;"	d
GLU_TESS_ERROR5	GL/glu.h	475;"	d
GLU_TESS_ERROR6	GL/glu.h	476;"	d
GLU_TESS_ERROR7	GL/glu.h	477;"	d
GLU_TESS_ERROR8	GL/glu.h	478;"	d
GLU_TESS_ERROR_DATA	GL/glu.h	460;"	d
GLU_TESS_MAX_COORD	GL/glu.h	431;"	d
GLU_TESS_MISSING_BEGIN_CONTOUR	GL/glu.h	481;"	d
GLU_TESS_MISSING_BEGIN_POLYGON	GL/glu.h	480;"	d
GLU_TESS_MISSING_END_CONTOUR	GL/glu.h	483;"	d
GLU_TESS_MISSING_END_POLYGON	GL/glu.h	482;"	d
GLU_TESS_NEED_COMBINE_CALLBACK	GL/glu.h	485;"	d
GLU_TESS_TOLERANCE	GL/glu.h	436;"	d
GLU_TESS_VERTEX	GL/glu.h	447;"	d
GLU_TESS_VERTEX_DATA	GL/glu.h	457;"	d
GLU_TESS_WINDING_ABS_GEQ_TWO	GL/glu.h	443;"	d
GLU_TESS_WINDING_NEGATIVE	GL/glu.h	442;"	d
GLU_TESS_WINDING_NONZERO	GL/glu.h	440;"	d
GLU_TESS_WINDING_ODD	GL/glu.h	439;"	d
GLU_TESS_WINDING_POSITIVE	GL/glu.h	441;"	d
GLU_TESS_WINDING_RULE	GL/glu.h	434;"	d
GLU_TRUE	GL/glu.h	404;"	d
GLU_UNKNOWN	GL/glu.h	570;"	d
GLU_U_STEP	GL/glu.h	496;"	d
GLU_VERSION	GL/glu.h	400;"	d
GLU_VERSION_1_1	GL/glu.h	390;"	d
GLU_VERSION_1_2	GL/glu.h	391;"	d
GLU_VERTEX	GL/glu.h	574;"	d
GLU_V_STEP	GL/glu.h	497;"	d
GLUnurbs	GL/glu.h	/^typedef struct GLUnurbs GLUnurbs;$/;"	t	typeref:struct:GLUnurbs
GLUnurbsErrorProc	GL/glu.h	/^typedef void (CALLBACK* GLUnurbsErrorProc)   (GLenum);$/;"	t
GLUnurbsObj	GL/glu.h	/^typedef class GLUnurbs GLUnurbsObj;$/;"	t	typeref:class:GLUnurbs
GLUnurbsObj	GL/glu.h	/^typedef struct GLUnurbs GLUnurbsObj;$/;"	t	typeref:struct:GLUnurbs
GLUquadric	GL/glu.h	/^typedef struct GLUquadric GLUquadric;$/;"	t	typeref:struct:GLUquadric
GLUquadricErrorProc	GL/glu.h	/^typedef void (CALLBACK* GLUquadricErrorProc) (GLenum);$/;"	t
GLUquadricObj	GL/glu.h	/^typedef class GLUquadric GLUquadricObj;$/;"	t	typeref:class:GLUquadric
GLUquadricObj	GL/glu.h	/^typedef struct GLUquadric GLUquadricObj;$/;"	t	typeref:struct:GLUquadric
GLUtessBeginDataProc	GL/glu.h	/^typedef void (CALLBACK* GLUtessBeginDataProc)    (GLenum, void *);$/;"	t
GLUtessBeginProc	GL/glu.h	/^typedef void (CALLBACK* GLUtessBeginProc)        (GLenum);$/;"	t
GLUtessCombineDataProc	GL/glu.h	/^typedef void (CALLBACK* GLUtessCombineDataProc)  (GLdouble[3],$/;"	t
GLUtessCombineProc	GL/glu.h	/^typedef void (CALLBACK* GLUtessCombineProc)      (GLdouble[3],$/;"	t
GLUtessEdgeFlagDataProc	GL/glu.h	/^typedef void (CALLBACK* GLUtessEdgeFlagDataProc) (GLboolean, void *);$/;"	t
GLUtessEdgeFlagProc	GL/glu.h	/^typedef void (CALLBACK* GLUtessEdgeFlagProc)     (GLboolean);$/;"	t
GLUtessEndDataProc	GL/glu.h	/^typedef void (CALLBACK* GLUtessEndDataProc)      (void *);$/;"	t
GLUtessEndProc	GL/glu.h	/^typedef void (CALLBACK* GLUtessEndProc)          (void);$/;"	t
GLUtessErrorDataProc	GL/glu.h	/^typedef void (CALLBACK* GLUtessErrorDataProc)    (GLenum, void *);$/;"	t
GLUtessErrorProc	GL/glu.h	/^typedef void (CALLBACK* GLUtessErrorProc)        (GLenum);$/;"	t
GLUtessVertexDataProc	GL/glu.h	/^typedef void (CALLBACK* GLUtessVertexDataProc)   (void *, void *);$/;"	t
GLUtessVertexProc	GL/glu.h	/^typedef void (CALLBACK* GLUtessVertexProc)       (void *);$/;"	t
GLUtesselator	GL/glu.h	/^typedef struct GLUtesselator GLUtesselator;$/;"	t	typeref:struct:GLUtesselator
GLUtesselatorObj	GL/glu.h	/^typedef class GLUtesselator GLUtesselatorObj;$/;"	t	typeref:class:GLUtesselator
GLUtesselatorObj	GL/glu.h	/^typedef struct GLUtesselator GLUtesselatorObj;$/;"	t	typeref:struct:GLUtesselator
GLUtriangulatorObj	GL/glu.h	/^typedef class GLUtesselator GLUtriangulatorObj;$/;"	t	typeref:class:GLUtesselator
GLUtriangulatorObj	GL/glu.h	/^typedef struct GLUtesselator GLUtriangulatorObj;$/;"	t	typeref:struct:GLUtesselator
GL_2D	GL/gl.h	307;"	d
GL_2_BYTES	GL/gl.h	198;"	d
GL_3D	GL/gl.h	308;"	d
GL_3D_COLOR	GL/gl.h	309;"	d
GL_3D_COLOR_TEXTURE	GL/gl.h	310;"	d
GL_3_BYTES	GL/gl.h	199;"	d
GL_4D_COLOR_TEXTURE	GL/gl.h	311;"	d
GL_4_BYTES	GL/gl.h	200;"	d
GL_ACCUM	GL/gl.h	65;"	d
GL_ACCUM_ALPHA_BITS	GL/gl.h	544;"	d
GL_ACCUM_BLUE_BITS	GL/gl.h	543;"	d
GL_ACCUM_BUFFER_BIT	GL/gl.h	91;"	d
GL_ACCUM_CLEAR_VALUE	GL/gl.h	419;"	d
GL_ACCUM_GREEN_BITS	GL/gl.h	542;"	d
GL_ACCUM_RED_BITS	GL/gl.h	541;"	d
GL_ADD	GL/gl.h	69;"	d
GL_ALL_ATTRIB_BITS	GL/gl.h	102;"	d
GL_ALPHA	GL/gl.h	783;"	d
GL_ALPHA12	GL/gl.h	980;"	d
GL_ALPHA16	GL/gl.h	981;"	d
GL_ALPHA4	GL/gl.h	978;"	d
GL_ALPHA8	GL/gl.h	979;"	d
GL_ALPHA_BIAS	GL/gl.h	518;"	d
GL_ALPHA_BITS	GL/gl.h	538;"	d
GL_ALPHA_SCALE	GL/gl.h	517;"	d
GL_ALPHA_TEST	GL/gl.h	440;"	d
GL_ALPHA_TEST_FUNC	GL/gl.h	441;"	d
GL_ALPHA_TEST_REF	GL/gl.h	442;"	d
GL_ALWAYS	GL/gl.h	79;"	d
GL_AMBIENT	GL/gl.h	655;"	d
GL_AMBIENT_AND_DIFFUSE	GL/gl.h	744;"	d
GL_AND	GL/gl.h	700;"	d
GL_AND_INVERTED	GL/gl.h	703;"	d
GL_AND_REVERSE	GL/gl.h	701;"	d
GL_ATTRIB_STACK_DEPTH	GL/gl.h	438;"	d
GL_AUTO_NORMAL	GL/gl.h	546;"	d
GL_AUX0	GL/gl.h	224;"	d
GL_AUX1	GL/gl.h	225;"	d
GL_AUX2	GL/gl.h	226;"	d
GL_AUX3	GL/gl.h	227;"	d
GL_AUX_BUFFERS	GL/gl.h	450;"	d
GL_BACK	GL/gl.h	220;"	d
GL_BACK_LEFT	GL/gl.h	217;"	d
GL_BACK_RIGHT	GL/gl.h	218;"	d
GL_BGRA_EXT	GL/gl.h	1114;"	d
GL_BGR_EXT	GL/gl.h	1113;"	d
GL_BITMAP	GL/gl.h	832;"	d
GL_BITMAP_TOKEN	GL/gl.h	318;"	d
GL_BLEND	GL/gl.h	446;"	d
GL_BLEND_DST	GL/gl.h	444;"	d
GL_BLEND_SRC	GL/gl.h	445;"	d
GL_BLUE	GL/gl.h	782;"	d
GL_BLUE_BIAS	GL/gl.h	516;"	d
GL_BLUE_BITS	GL/gl.h	537;"	d
GL_BLUE_SCALE	GL/gl.h	515;"	d
GL_BYTE	GL/gl.h	191;"	d
GL_C3F_V3F	GL/gl.h	1057;"	d
GL_C4F_N3F_V3F	GL/gl.h	1059;"	d
GL_C4UB_V2F	GL/gl.h	1055;"	d
GL_C4UB_V3F	GL/gl.h	1056;"	d
GL_CCW	GL/gl.h	339;"	d
GL_CLAMP	GL/gl.h	956;"	d
GL_CLEAR	GL/gl.h	699;"	d
GL_CLIENT_ALL_ATTRIB_BITS	GL/gl.h	968;"	d
GL_CLIENT_ATTRIB_STACK_DEPTH	GL/gl.h	439;"	d
GL_CLIENT_PIXEL_STORE_BIT	GL/gl.h	966;"	d
GL_CLIENT_VERTEX_ARRAY_BIT	GL/gl.h	967;"	d
GL_CLIP_PLANE0	GL/gl.h	156;"	d
GL_CLIP_PLANE1	GL/gl.h	157;"	d
GL_CLIP_PLANE2	GL/gl.h	158;"	d
GL_CLIP_PLANE3	GL/gl.h	159;"	d
GL_CLIP_PLANE4	GL/gl.h	160;"	d
GL_CLIP_PLANE5	GL/gl.h	161;"	d
GL_COEFF	GL/gl.h	342;"	d
GL_COLOR	GL/gl.h	772;"	d
GL_COLOR_ARRAY	GL/gl.h	1029;"	d
GL_COLOR_ARRAY_COUNT_EXT	GL/gl.h	1094;"	d
GL_COLOR_ARRAY_EXT	GL/gl.h	1080;"	d
GL_COLOR_ARRAY_POINTER	GL/gl.h	1049;"	d
GL_COLOR_ARRAY_POINTER_EXT	GL/gl.h	1106;"	d
GL_COLOR_ARRAY_SIZE	GL/gl.h	1038;"	d
GL_COLOR_ARRAY_SIZE_EXT	GL/gl.h	1091;"	d
GL_COLOR_ARRAY_STRIDE	GL/gl.h	1040;"	d
GL_COLOR_ARRAY_STRIDE_EXT	GL/gl.h	1093;"	d
GL_COLOR_ARRAY_TYPE	GL/gl.h	1039;"	d
GL_COLOR_ARRAY_TYPE_EXT	GL/gl.h	1092;"	d
GL_COLOR_BUFFER_BIT	GL/gl.h	96;"	d
GL_COLOR_CLEAR_VALUE	GL/gl.h	457;"	d
GL_COLOR_INDEX	GL/gl.h	777;"	d
GL_COLOR_INDEX12_EXT	GL/gl.h	1132;"	d
GL_COLOR_INDEX16_EXT	GL/gl.h	1133;"	d
GL_COLOR_INDEX1_EXT	GL/gl.h	1128;"	d
GL_COLOR_INDEX2_EXT	GL/gl.h	1129;"	d
GL_COLOR_INDEX4_EXT	GL/gl.h	1130;"	d
GL_COLOR_INDEX8_EXT	GL/gl.h	1131;"	d
GL_COLOR_INDEXES	GL/gl.h	745;"	d
GL_COLOR_LOGIC_OP	GL/gl.h	449;"	d
GL_COLOR_MATERIAL	GL/gl.h	406;"	d
GL_COLOR_MATERIAL_FACE	GL/gl.h	404;"	d
GL_COLOR_MATERIAL_PARAMETER	GL/gl.h	405;"	d
GL_COLOR_TABLE_ALPHA_SIZE_EXT	GL/gl.h	1124;"	d
GL_COLOR_TABLE_BLUE_SIZE_EXT	GL/gl.h	1123;"	d
GL_COLOR_TABLE_FORMAT_EXT	GL/gl.h	1119;"	d
GL_COLOR_TABLE_GREEN_SIZE_EXT	GL/gl.h	1122;"	d
GL_COLOR_TABLE_INTENSITY_SIZE_EXT	GL/gl.h	1126;"	d
GL_COLOR_TABLE_LUMINANCE_SIZE_EXT	GL/gl.h	1125;"	d
GL_COLOR_TABLE_RED_SIZE_EXT	GL/gl.h	1121;"	d
GL_COLOR_TABLE_WIDTH_EXT	GL/gl.h	1120;"	d
GL_COLOR_WRITEMASK	GL/gl.h	458;"	d
GL_COMPILE	GL/gl.h	683;"	d
GL_COMPILE_AND_EXECUTE	GL/gl.h	684;"	d
GL_CONSTANT_ATTENUATION	GL/gl.h	662;"	d
GL_COPY	GL/gl.h	702;"	d
GL_COPY_INVERTED	GL/gl.h	711;"	d
GL_COPY_PIXEL_TOKEN	GL/gl.h	320;"	d
GL_CULL_FACE	GL/gl.h	396;"	d
GL_CULL_FACE_MODE	GL/gl.h	397;"	d
GL_CURRENT_BIT	GL/gl.h	82;"	d
GL_CURRENT_COLOR	GL/gl.h	367;"	d
GL_CURRENT_INDEX	GL/gl.h	368;"	d
GL_CURRENT_NORMAL	GL/gl.h	369;"	d
GL_CURRENT_RASTER_COLOR	GL/gl.h	371;"	d
GL_CURRENT_RASTER_DISTANCE	GL/gl.h	376;"	d
GL_CURRENT_RASTER_INDEX	GL/gl.h	372;"	d
GL_CURRENT_RASTER_POSITION	GL/gl.h	374;"	d
GL_CURRENT_RASTER_POSITION_VALID	GL/gl.h	375;"	d
GL_CURRENT_RASTER_TEXTURE_COORDS	GL/gl.h	373;"	d
GL_CURRENT_TEXTURE_COORDS	GL/gl.h	370;"	d
GL_CW	GL/gl.h	338;"	d
GL_DECAL	GL/gl.h	908;"	d
GL_DECR	GL/gl.h	885;"	d
GL_DEPTH	GL/gl.h	773;"	d
GL_DEPTH_BIAS	GL/gl.h	520;"	d
GL_DEPTH_BITS	GL/gl.h	539;"	d
GL_DEPTH_BUFFER_BIT	GL/gl.h	90;"	d
GL_DEPTH_CLEAR_VALUE	GL/gl.h	417;"	d
GL_DEPTH_COMPONENT	GL/gl.h	779;"	d
GL_DEPTH_FUNC	GL/gl.h	418;"	d
GL_DEPTH_RANGE	GL/gl.h	414;"	d
GL_DEPTH_SCALE	GL/gl.h	519;"	d
GL_DEPTH_TEST	GL/gl.h	415;"	d
GL_DEPTH_WRITEMASK	GL/gl.h	416;"	d
GL_DIFFUSE	GL/gl.h	656;"	d
GL_DITHER	GL/gl.h	443;"	d
GL_DOMAIN	GL/gl.h	344;"	d
GL_DONT_CARE	GL/gl.h	621;"	d
GL_DOUBLE	GL/gl.h	201;"	d
GL_DOUBLEBUFFER	GL/gl.h	461;"	d
GL_DOUBLE_EXT	GL/gl.h	1110;"	d
GL_DRAW_BUFFER	GL/gl.h	451;"	d
GL_DRAW_PIXEL_TOKEN	GL/gl.h	319;"	d
GL_DST_ALPHA	GL/gl.h	123;"	d
GL_DST_COLOR	GL/gl.h	129;"	d
GL_EDGE_FLAG	GL/gl.h	395;"	d
GL_EDGE_FLAG_ARRAY	GL/gl.h	1032;"	d
GL_EDGE_FLAG_ARRAY_COUNT_EXT	GL/gl.h	1103;"	d
GL_EDGE_FLAG_ARRAY_EXT	GL/gl.h	1083;"	d
GL_EDGE_FLAG_ARRAY_POINTER	GL/gl.h	1052;"	d
GL_EDGE_FLAG_ARRAY_POINTER_EXT	GL/gl.h	1109;"	d
GL_EDGE_FLAG_ARRAY_STRIDE	GL/gl.h	1046;"	d
GL_EDGE_FLAG_ARRAY_STRIDE_EXT	GL/gl.h	1102;"	d
GL_EMISSION	GL/gl.h	742;"	d
GL_ENABLE_BIT	GL/gl.h	95;"	d
GL_EQUAL	GL/gl.h	74;"	d
GL_EQUIV	GL/gl.h	708;"	d
GL_EVAL_BIT	GL/gl.h	98;"	d
GL_EXP	GL/gl.h	325;"	d
GL_EXP2	GL/gl.h	326;"	d
GL_EXTENSIONS	GL/gl.h	892;"	d
GL_EXT_bgra	GL/gl.h	1070;"	d
GL_EXT_paletted_texture	GL/gl.h	1071;"	d
GL_EXT_vertex_array	GL/gl.h	1069;"	d
GL_EYE_LINEAR	GL/gl.h	920;"	d
GL_EYE_PLANE	GL/gl.h	927;"	d
GL_FALSE	GL/gl.h	139;"	d
GL_FASTEST	GL/gl.h	622;"	d
GL_FEEDBACK	GL/gl.h	862;"	d
GL_FEEDBACK_BUFFER_POINTER	GL/gl.h	571;"	d
GL_FEEDBACK_BUFFER_SIZE	GL/gl.h	572;"	d
GL_FEEDBACK_BUFFER_TYPE	GL/gl.h	573;"	d
GL_FILL	GL/gl.h	844;"	d
GL_FLAT	GL/gl.h	866;"	d
GL_FLOAT	GL/gl.h	197;"	d
GL_FOG	GL/gl.h	407;"	d
GL_FOG_BIT	GL/gl.h	89;"	d
GL_FOG_COLOR	GL/gl.h	413;"	d
GL_FOG_DENSITY	GL/gl.h	409;"	d
GL_FOG_END	GL/gl.h	411;"	d
GL_FOG_HINT	GL/gl.h	468;"	d
GL_FOG_INDEX	GL/gl.h	408;"	d
GL_FOG_MODE	GL/gl.h	412;"	d
GL_FOG_SPECULAR_TEXTURE_WIN	GL/gl.h	1144;"	d
GL_FOG_START	GL/gl.h	410;"	d
GL_FRONT	GL/gl.h	219;"	d
GL_FRONT_AND_BACK	GL/gl.h	223;"	d
GL_FRONT_FACE	GL/gl.h	398;"	d
GL_FRONT_LEFT	GL/gl.h	215;"	d
GL_FRONT_RIGHT	GL/gl.h	216;"	d
GL_GEQUAL	GL/gl.h	78;"	d
GL_GREATER	GL/gl.h	76;"	d
GL_GREEN	GL/gl.h	781;"	d
GL_GREEN_BIAS	GL/gl.h	514;"	d
GL_GREEN_BITS	GL/gl.h	536;"	d
GL_GREEN_SCALE	GL/gl.h	513;"	d
GL_HINT_BIT	GL/gl.h	97;"	d
GL_INCR	GL/gl.h	884;"	d
GL_INDEX_ARRAY	GL/gl.h	1030;"	d
GL_INDEX_ARRAY_COUNT_EXT	GL/gl.h	1097;"	d
GL_INDEX_ARRAY_EXT	GL/gl.h	1081;"	d
GL_INDEX_ARRAY_POINTER	GL/gl.h	1050;"	d
GL_INDEX_ARRAY_POINTER_EXT	GL/gl.h	1107;"	d
GL_INDEX_ARRAY_STRIDE	GL/gl.h	1042;"	d
GL_INDEX_ARRAY_STRIDE_EXT	GL/gl.h	1096;"	d
GL_INDEX_ARRAY_TYPE	GL/gl.h	1041;"	d
GL_INDEX_ARRAY_TYPE_EXT	GL/gl.h	1095;"	d
GL_INDEX_BITS	GL/gl.h	534;"	d
GL_INDEX_CLEAR_VALUE	GL/gl.h	455;"	d
GL_INDEX_LOGIC_OP	GL/gl.h	448;"	d
GL_INDEX_MODE	GL/gl.h	459;"	d
GL_INDEX_OFFSET	GL/gl.h	508;"	d
GL_INDEX_SHIFT	GL/gl.h	507;"	d
GL_INDEX_WRITEMASK	GL/gl.h	456;"	d
GL_INT	GL/gl.h	195;"	d
GL_INTENSITY	GL/gl.h	992;"	d
GL_INTENSITY12	GL/gl.h	995;"	d
GL_INTENSITY16	GL/gl.h	996;"	d
GL_INTENSITY4	GL/gl.h	993;"	d
GL_INTENSITY8	GL/gl.h	994;"	d
GL_INVALID_ENUM	GL/gl.h	299;"	d
GL_INVALID_OPERATION	GL/gl.h	301;"	d
GL_INVALID_VALUE	GL/gl.h	300;"	d
GL_INVERT	GL/gl.h	709;"	d
GL_KEEP	GL/gl.h	882;"	d
GL_LEFT	GL/gl.h	221;"	d
GL_LEQUAL	GL/gl.h	75;"	d
GL_LESS	GL/gl.h	73;"	d
GL_LIGHT0	GL/gl.h	645;"	d
GL_LIGHT1	GL/gl.h	646;"	d
GL_LIGHT2	GL/gl.h	647;"	d
GL_LIGHT3	GL/gl.h	648;"	d
GL_LIGHT4	GL/gl.h	649;"	d
GL_LIGHT5	GL/gl.h	650;"	d
GL_LIGHT6	GL/gl.h	651;"	d
GL_LIGHT7	GL/gl.h	652;"	d
GL_LIGHTING	GL/gl.h	399;"	d
GL_LIGHTING_BIT	GL/gl.h	88;"	d
GL_LIGHT_MODEL_AMBIENT	GL/gl.h	402;"	d
GL_LIGHT_MODEL_LOCAL_VIEWER	GL/gl.h	400;"	d
GL_LIGHT_MODEL_TWO_SIDE	GL/gl.h	401;"	d
GL_LINE	GL/gl.h	843;"	d
GL_LINEAR	GL/gl.h	931;"	d
GL_LINEAR_ATTENUATION	GL/gl.h	663;"	d
GL_LINEAR_MIPMAP_LINEAR	GL/gl.h	939;"	d
GL_LINEAR_MIPMAP_NEAREST	GL/gl.h	937;"	d
GL_LINES	GL/gl.h	106;"	d
GL_LINE_BIT	GL/gl.h	84;"	d
GL_LINE_LOOP	GL/gl.h	107;"	d
GL_LINE_RESET_TOKEN	GL/gl.h	321;"	d
GL_LINE_SMOOTH	GL/gl.h	381;"	d
GL_LINE_SMOOTH_HINT	GL/gl.h	466;"	d
GL_LINE_STIPPLE	GL/gl.h	385;"	d
GL_LINE_STIPPLE_PATTERN	GL/gl.h	386;"	d
GL_LINE_STIPPLE_REPEAT	GL/gl.h	387;"	d
GL_LINE_STRIP	GL/gl.h	108;"	d
GL_LINE_TOKEN	GL/gl.h	316;"	d
GL_LINE_WIDTH	GL/gl.h	382;"	d
GL_LINE_WIDTH_GRANULARITY	GL/gl.h	384;"	d
GL_LINE_WIDTH_RANGE	GL/gl.h	383;"	d
GL_LIST_BASE	GL/gl.h	390;"	d
GL_LIST_BIT	GL/gl.h	99;"	d
GL_LIST_INDEX	GL/gl.h	391;"	d
GL_LIST_MODE	GL/gl.h	388;"	d
GL_LOAD	GL/gl.h	66;"	d
GL_LOGIC_OP	GL/gl.h	1147;"	d
GL_LOGIC_OP_MODE	GL/gl.h	447;"	d
GL_LUMINANCE	GL/gl.h	786;"	d
GL_LUMINANCE12	GL/gl.h	984;"	d
GL_LUMINANCE12_ALPHA12	GL/gl.h	990;"	d
GL_LUMINANCE12_ALPHA4	GL/gl.h	989;"	d
GL_LUMINANCE16	GL/gl.h	985;"	d
GL_LUMINANCE16_ALPHA16	GL/gl.h	991;"	d
GL_LUMINANCE4	GL/gl.h	982;"	d
GL_LUMINANCE4_ALPHA4	GL/gl.h	986;"	d
GL_LUMINANCE6_ALPHA2	GL/gl.h	987;"	d
GL_LUMINANCE8	GL/gl.h	983;"	d
GL_LUMINANCE8_ALPHA8	GL/gl.h	988;"	d
GL_LUMINANCE_ALPHA	GL/gl.h	787;"	d
GL_MAP1_COLOR_4	GL/gl.h	547;"	d
GL_MAP1_GRID_DOMAIN	GL/gl.h	565;"	d
GL_MAP1_GRID_SEGMENTS	GL/gl.h	566;"	d
GL_MAP1_INDEX	GL/gl.h	548;"	d
GL_MAP1_NORMAL	GL/gl.h	549;"	d
GL_MAP1_TEXTURE_COORD_1	GL/gl.h	550;"	d
GL_MAP1_TEXTURE_COORD_2	GL/gl.h	551;"	d
GL_MAP1_TEXTURE_COORD_3	GL/gl.h	552;"	d
GL_MAP1_TEXTURE_COORD_4	GL/gl.h	553;"	d
GL_MAP1_VERTEX_3	GL/gl.h	554;"	d
GL_MAP1_VERTEX_4	GL/gl.h	555;"	d
GL_MAP2_COLOR_4	GL/gl.h	556;"	d
GL_MAP2_GRID_DOMAIN	GL/gl.h	567;"	d
GL_MAP2_GRID_SEGMENTS	GL/gl.h	568;"	d
GL_MAP2_INDEX	GL/gl.h	557;"	d
GL_MAP2_NORMAL	GL/gl.h	558;"	d
GL_MAP2_TEXTURE_COORD_1	GL/gl.h	559;"	d
GL_MAP2_TEXTURE_COORD_2	GL/gl.h	560;"	d
GL_MAP2_TEXTURE_COORD_3	GL/gl.h	561;"	d
GL_MAP2_TEXTURE_COORD_4	GL/gl.h	562;"	d
GL_MAP2_VERTEX_3	GL/gl.h	563;"	d
GL_MAP2_VERTEX_4	GL/gl.h	564;"	d
GL_MAP_COLOR	GL/gl.h	505;"	d
GL_MAP_STENCIL	GL/gl.h	506;"	d
GL_MATRIX_MODE	GL/gl.h	429;"	d
GL_MAX_ATTRIB_STACK_DEPTH	GL/gl.h	526;"	d
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH	GL/gl.h	532;"	d
GL_MAX_CLIP_PLANES	GL/gl.h	523;"	d
GL_MAX_ELEMENTS_INDICES_WIN	GL/gl.h	1137;"	d
GL_MAX_ELEMENTS_VERTICES_WIN	GL/gl.h	1136;"	d
GL_MAX_EVAL_ORDER	GL/gl.h	521;"	d
GL_MAX_LIGHTS	GL/gl.h	522;"	d
GL_MAX_LIST_NESTING	GL/gl.h	389;"	d
GL_MAX_MODELVIEW_STACK_DEPTH	GL/gl.h	527;"	d
GL_MAX_NAME_STACK_DEPTH	GL/gl.h	528;"	d
GL_MAX_PIXEL_MAP_TABLE	GL/gl.h	525;"	d
GL_MAX_PROJECTION_STACK_DEPTH	GL/gl.h	529;"	d
GL_MAX_TEXTURE_SIZE	GL/gl.h	524;"	d
GL_MAX_TEXTURE_STACK_DEPTH	GL/gl.h	530;"	d
GL_MAX_VIEWPORT_DIMS	GL/gl.h	531;"	d
GL_MODELVIEW	GL/gl.h	751;"	d
GL_MODELVIEW_MATRIX	GL/gl.h	435;"	d
GL_MODELVIEW_STACK_DEPTH	GL/gl.h	432;"	d
GL_MODULATE	GL/gl.h	907;"	d
GL_MULT	GL/gl.h	68;"	d
GL_N3F_V3F	GL/gl.h	1058;"	d
GL_NAME_STACK_DEPTH	GL/gl.h	545;"	d
GL_NAND	GL/gl.h	713;"	d
GL_NEAREST	GL/gl.h	930;"	d
GL_NEAREST_MIPMAP_LINEAR	GL/gl.h	938;"	d
GL_NEAREST_MIPMAP_NEAREST	GL/gl.h	936;"	d
GL_NEVER	GL/gl.h	72;"	d
GL_NICEST	GL/gl.h	623;"	d
GL_NONE	GL/gl.h	214;"	d
GL_NOOP	GL/gl.h	704;"	d
GL_NOR	GL/gl.h	707;"	d
GL_NORMALIZE	GL/gl.h	430;"	d
GL_NORMAL_ARRAY	GL/gl.h	1028;"	d
GL_NORMAL_ARRAY_COUNT_EXT	GL/gl.h	1090;"	d
GL_NORMAL_ARRAY_EXT	GL/gl.h	1079;"	d
GL_NORMAL_ARRAY_POINTER	GL/gl.h	1048;"	d
GL_NORMAL_ARRAY_POINTER_EXT	GL/gl.h	1105;"	d
GL_NORMAL_ARRAY_STRIDE	GL/gl.h	1037;"	d
GL_NORMAL_ARRAY_STRIDE_EXT	GL/gl.h	1089;"	d
GL_NORMAL_ARRAY_TYPE	GL/gl.h	1036;"	d
GL_NORMAL_ARRAY_TYPE_EXT	GL/gl.h	1088;"	d
GL_NOTEQUAL	GL/gl.h	77;"	d
GL_NO_ERROR	GL/gl.h	298;"	d
GL_OBJECT_LINEAR	GL/gl.h	921;"	d
GL_OBJECT_PLANE	GL/gl.h	926;"	d
GL_ONE	GL/gl.h	118;"	d
GL_ONE_MINUS_DST_ALPHA	GL/gl.h	124;"	d
GL_ONE_MINUS_DST_COLOR	GL/gl.h	130;"	d
GL_ONE_MINUS_SRC_ALPHA	GL/gl.h	122;"	d
GL_ONE_MINUS_SRC_COLOR	GL/gl.h	120;"	d
GL_OR	GL/gl.h	706;"	d
GL_ORDER	GL/gl.h	343;"	d
GL_OR_INVERTED	GL/gl.h	712;"	d
GL_OR_REVERSE	GL/gl.h	710;"	d
GL_OUT_OF_MEMORY	GL/gl.h	304;"	d
GL_PACK_ALIGNMENT	GL/gl.h	504;"	d
GL_PACK_LSB_FIRST	GL/gl.h	500;"	d
GL_PACK_ROW_LENGTH	GL/gl.h	501;"	d
GL_PACK_SKIP_PIXELS	GL/gl.h	503;"	d
GL_PACK_SKIP_ROWS	GL/gl.h	502;"	d
GL_PACK_SWAP_BYTES	GL/gl.h	499;"	d
GL_PASS_THROUGH_TOKEN	GL/gl.h	314;"	d
GL_PERSPECTIVE_CORRECTION_HINT	GL/gl.h	464;"	d
GL_PHONG_HINT_WIN	GL/gl.h	1141;"	d
GL_PHONG_WIN	GL/gl.h	1140;"	d
GL_PIXEL_MAP_A_TO_A	GL/gl.h	482;"	d
GL_PIXEL_MAP_A_TO_A_SIZE	GL/gl.h	492;"	d
GL_PIXEL_MAP_B_TO_B	GL/gl.h	481;"	d
GL_PIXEL_MAP_B_TO_B_SIZE	GL/gl.h	491;"	d
GL_PIXEL_MAP_G_TO_G	GL/gl.h	480;"	d
GL_PIXEL_MAP_G_TO_G_SIZE	GL/gl.h	490;"	d
GL_PIXEL_MAP_I_TO_A	GL/gl.h	478;"	d
GL_PIXEL_MAP_I_TO_A_SIZE	GL/gl.h	488;"	d
GL_PIXEL_MAP_I_TO_B	GL/gl.h	477;"	d
GL_PIXEL_MAP_I_TO_B_SIZE	GL/gl.h	487;"	d
GL_PIXEL_MAP_I_TO_G	GL/gl.h	476;"	d
GL_PIXEL_MAP_I_TO_G_SIZE	GL/gl.h	486;"	d
GL_PIXEL_MAP_I_TO_I	GL/gl.h	473;"	d
GL_PIXEL_MAP_I_TO_I_SIZE	GL/gl.h	483;"	d
GL_PIXEL_MAP_I_TO_R	GL/gl.h	475;"	d
GL_PIXEL_MAP_I_TO_R_SIZE	GL/gl.h	485;"	d
GL_PIXEL_MAP_R_TO_R	GL/gl.h	479;"	d
GL_PIXEL_MAP_R_TO_R_SIZE	GL/gl.h	489;"	d
GL_PIXEL_MAP_S_TO_S	GL/gl.h	474;"	d
GL_PIXEL_MAP_S_TO_S_SIZE	GL/gl.h	484;"	d
GL_PIXEL_MODE_BIT	GL/gl.h	87;"	d
GL_POINT	GL/gl.h	842;"	d
GL_POINTS	GL/gl.h	105;"	d
GL_POINT_BIT	GL/gl.h	83;"	d
GL_POINT_SIZE	GL/gl.h	378;"	d
GL_POINT_SIZE_GRANULARITY	GL/gl.h	380;"	d
GL_POINT_SIZE_RANGE	GL/gl.h	379;"	d
GL_POINT_SMOOTH	GL/gl.h	377;"	d
GL_POINT_SMOOTH_HINT	GL/gl.h	465;"	d
GL_POINT_TOKEN	GL/gl.h	315;"	d
GL_POLYGON	GL/gl.h	114;"	d
GL_POLYGON_BIT	GL/gl.h	85;"	d
GL_POLYGON_MODE	GL/gl.h	392;"	d
GL_POLYGON_OFFSET_FACTOR	GL/gl.h	971;"	d
GL_POLYGON_OFFSET_FILL	GL/gl.h	975;"	d
GL_POLYGON_OFFSET_LINE	GL/gl.h	974;"	d
GL_POLYGON_OFFSET_POINT	GL/gl.h	973;"	d
GL_POLYGON_OFFSET_UNITS	GL/gl.h	972;"	d
GL_POLYGON_SMOOTH	GL/gl.h	393;"	d
GL_POLYGON_SMOOTH_HINT	GL/gl.h	467;"	d
GL_POLYGON_STIPPLE	GL/gl.h	394;"	d
GL_POLYGON_STIPPLE_BIT	GL/gl.h	86;"	d
GL_POLYGON_TOKEN	GL/gl.h	317;"	d
GL_POSITION	GL/gl.h	658;"	d
GL_PROJECTION	GL/gl.h	752;"	d
GL_PROJECTION_MATRIX	GL/gl.h	436;"	d
GL_PROJECTION_STACK_DEPTH	GL/gl.h	433;"	d
GL_PROXY_TEXTURE_1D	GL/gl.h	1017;"	d
GL_PROXY_TEXTURE_2D	GL/gl.h	1018;"	d
GL_Q	GL/gl.h	898;"	d
GL_QUADRATIC_ATTENUATION	GL/gl.h	664;"	d
GL_QUADS	GL/gl.h	112;"	d
GL_QUAD_STRIP	GL/gl.h	113;"	d
GL_R	GL/gl.h	897;"	d
GL_R3_G3_B2	GL/gl.h	997;"	d
GL_READ_BUFFER	GL/gl.h	452;"	d
GL_RED	GL/gl.h	780;"	d
GL_RED_BIAS	GL/gl.h	510;"	d
GL_RED_BITS	GL/gl.h	535;"	d
GL_RED_SCALE	GL/gl.h	509;"	d
GL_RENDER	GL/gl.h	861;"	d
GL_RENDERER	GL/gl.h	890;"	d
GL_RENDER_MODE	GL/gl.h	463;"	d
GL_REPEAT	GL/gl.h	957;"	d
GL_REPLACE	GL/gl.h	883;"	d
GL_RETURN	GL/gl.h	67;"	d
GL_RGB	GL/gl.h	784;"	d
GL_RGB10	GL/gl.h	1001;"	d
GL_RGB10_A2	GL/gl.h	1008;"	d
GL_RGB12	GL/gl.h	1002;"	d
GL_RGB16	GL/gl.h	1003;"	d
GL_RGB4	GL/gl.h	998;"	d
GL_RGB5	GL/gl.h	999;"	d
GL_RGB5_A1	GL/gl.h	1006;"	d
GL_RGB8	GL/gl.h	1000;"	d
GL_RGBA	GL/gl.h	785;"	d
GL_RGBA12	GL/gl.h	1009;"	d
GL_RGBA16	GL/gl.h	1010;"	d
GL_RGBA2	GL/gl.h	1004;"	d
GL_RGBA4	GL/gl.h	1005;"	d
GL_RGBA8	GL/gl.h	1007;"	d
GL_RGBA_MODE	GL/gl.h	460;"	d
GL_RIGHT	GL/gl.h	222;"	d
GL_S	GL/gl.h	895;"	d
GL_SCISSOR_BIT	GL/gl.h	101;"	d
GL_SCISSOR_BOX	GL/gl.h	453;"	d
GL_SCISSOR_TEST	GL/gl.h	454;"	d
GL_SELECT	GL/gl.h	863;"	d
GL_SELECTION_BUFFER_POINTER	GL/gl.h	574;"	d
GL_SELECTION_BUFFER_SIZE	GL/gl.h	575;"	d
GL_SET	GL/gl.h	714;"	d
GL_SHADE_MODEL	GL/gl.h	403;"	d
GL_SHININESS	GL/gl.h	743;"	d
GL_SHORT	GL/gl.h	193;"	d
GL_SMOOTH	GL/gl.h	867;"	d
GL_SPECULAR	GL/gl.h	657;"	d
GL_SPHERE_MAP	GL/gl.h	922;"	d
GL_SPOT_CUTOFF	GL/gl.h	661;"	d
GL_SPOT_DIRECTION	GL/gl.h	659;"	d
GL_SPOT_EXPONENT	GL/gl.h	660;"	d
GL_SRC_ALPHA	GL/gl.h	121;"	d
GL_SRC_ALPHA_SATURATE	GL/gl.h	131;"	d
GL_SRC_COLOR	GL/gl.h	119;"	d
GL_STACK_OVERFLOW	GL/gl.h	302;"	d
GL_STACK_UNDERFLOW	GL/gl.h	303;"	d
GL_STENCIL	GL/gl.h	774;"	d
GL_STENCIL_BITS	GL/gl.h	540;"	d
GL_STENCIL_BUFFER_BIT	GL/gl.h	92;"	d
GL_STENCIL_CLEAR_VALUE	GL/gl.h	421;"	d
GL_STENCIL_FAIL	GL/gl.h	424;"	d
GL_STENCIL_FUNC	GL/gl.h	422;"	d
GL_STENCIL_INDEX	GL/gl.h	778;"	d
GL_STENCIL_PASS_DEPTH_FAIL	GL/gl.h	425;"	d
GL_STENCIL_PASS_DEPTH_PASS	GL/gl.h	426;"	d
GL_STENCIL_REF	GL/gl.h	427;"	d
GL_STENCIL_TEST	GL/gl.h	420;"	d
GL_STENCIL_VALUE_MASK	GL/gl.h	423;"	d
GL_STENCIL_WRITEMASK	GL/gl.h	428;"	d
GL_STEREO	GL/gl.h	462;"	d
GL_SUBPIXEL_BITS	GL/gl.h	533;"	d
GL_T	GL/gl.h	896;"	d
GL_T2F_C3F_V3F	GL/gl.h	1063;"	d
GL_T2F_C4F_N3F_V3F	GL/gl.h	1065;"	d
GL_T2F_C4UB_V3F	GL/gl.h	1062;"	d
GL_T2F_N3F_V3F	GL/gl.h	1064;"	d
GL_T2F_V3F	GL/gl.h	1060;"	d
GL_T4F_C4F_N3F_V4F	GL/gl.h	1066;"	d
GL_T4F_V4F	GL/gl.h	1061;"	d
GL_TEXTURE	GL/gl.h	753;"	d
GL_TEXTURE_1D	GL/gl.h	569;"	d
GL_TEXTURE_2D	GL/gl.h	570;"	d
GL_TEXTURE_ALPHA_SIZE	GL/gl.h	1014;"	d
GL_TEXTURE_BINDING_1D	GL/gl.h	1023;"	d
GL_TEXTURE_BINDING_2D	GL/gl.h	1024;"	d
GL_TEXTURE_BIT	GL/gl.h	100;"	d
GL_TEXTURE_BLUE_SIZE	GL/gl.h	1013;"	d
GL_TEXTURE_BORDER	GL/gl.h	610;"	d
GL_TEXTURE_BORDER_COLOR	GL/gl.h	609;"	d
GL_TEXTURE_COMPONENTS	GL/gl.h	1148;"	d
GL_TEXTURE_COORD_ARRAY	GL/gl.h	1031;"	d
GL_TEXTURE_COORD_ARRAY_COUNT_EXT	GL/gl.h	1101;"	d
GL_TEXTURE_COORD_ARRAY_EXT	GL/gl.h	1082;"	d
GL_TEXTURE_COORD_ARRAY_POINTER	GL/gl.h	1051;"	d
GL_TEXTURE_COORD_ARRAY_POINTER_EXT	GL/gl.h	1108;"	d
GL_TEXTURE_COORD_ARRAY_SIZE	GL/gl.h	1043;"	d
GL_TEXTURE_COORD_ARRAY_SIZE_EXT	GL/gl.h	1098;"	d
GL_TEXTURE_COORD_ARRAY_STRIDE	GL/gl.h	1045;"	d
GL_TEXTURE_COORD_ARRAY_STRIDE_EXT	GL/gl.h	1100;"	d
GL_TEXTURE_COORD_ARRAY_TYPE	GL/gl.h	1044;"	d
GL_TEXTURE_COORD_ARRAY_TYPE_EXT	GL/gl.h	1099;"	d
GL_TEXTURE_ENV	GL/gl.h	917;"	d
GL_TEXTURE_ENV_COLOR	GL/gl.h	914;"	d
GL_TEXTURE_ENV_MODE	GL/gl.h	913;"	d
GL_TEXTURE_GEN_MODE	GL/gl.h	925;"	d
GL_TEXTURE_GEN_Q	GL/gl.h	472;"	d
GL_TEXTURE_GEN_R	GL/gl.h	471;"	d
GL_TEXTURE_GEN_S	GL/gl.h	469;"	d
GL_TEXTURE_GEN_T	GL/gl.h	470;"	d
GL_TEXTURE_GREEN_SIZE	GL/gl.h	1012;"	d
GL_TEXTURE_HEIGHT	GL/gl.h	607;"	d
GL_TEXTURE_INTENSITY_SIZE	GL/gl.h	1016;"	d
GL_TEXTURE_INTERNAL_FORMAT	GL/gl.h	608;"	d
GL_TEXTURE_LUMINANCE_SIZE	GL/gl.h	1015;"	d
GL_TEXTURE_MAG_FILTER	GL/gl.h	942;"	d
GL_TEXTURE_MATRIX	GL/gl.h	437;"	d
GL_TEXTURE_MIN_FILTER	GL/gl.h	943;"	d
GL_TEXTURE_PRIORITY	GL/gl.h	1021;"	d
GL_TEXTURE_RED_SIZE	GL/gl.h	1011;"	d
GL_TEXTURE_RESIDENT	GL/gl.h	1022;"	d
GL_TEXTURE_STACK_DEPTH	GL/gl.h	434;"	d
GL_TEXTURE_WIDTH	GL/gl.h	606;"	d
GL_TEXTURE_WRAP_S	GL/gl.h	944;"	d
GL_TEXTURE_WRAP_T	GL/gl.h	945;"	d
GL_TRANSFORM_BIT	GL/gl.h	94;"	d
GL_TRIANGLES	GL/gl.h	109;"	d
GL_TRIANGLE_FAN	GL/gl.h	111;"	d
GL_TRIANGLE_STRIP	GL/gl.h	110;"	d
GL_TRUE	GL/gl.h	138;"	d
GL_UNPACK_ALIGNMENT	GL/gl.h	498;"	d
GL_UNPACK_LSB_FIRST	GL/gl.h	494;"	d
GL_UNPACK_ROW_LENGTH	GL/gl.h	495;"	d
GL_UNPACK_SKIP_PIXELS	GL/gl.h	497;"	d
GL_UNPACK_SKIP_ROWS	GL/gl.h	496;"	d
GL_UNPACK_SWAP_BYTES	GL/gl.h	493;"	d
GL_UNSIGNED_BYTE	GL/gl.h	192;"	d
GL_UNSIGNED_INT	GL/gl.h	196;"	d
GL_UNSIGNED_SHORT	GL/gl.h	194;"	d
GL_V2F	GL/gl.h	1053;"	d
GL_V3F	GL/gl.h	1054;"	d
GL_VENDOR	GL/gl.h	889;"	d
GL_VERSION	GL/gl.h	891;"	d
GL_VERSION_1_1	GL/gl.h	62;"	d
GL_VERTEX_ARRAY	GL/gl.h	1027;"	d
GL_VERTEX_ARRAY_COUNT_EXT	GL/gl.h	1087;"	d
GL_VERTEX_ARRAY_EXT	GL/gl.h	1078;"	d
GL_VERTEX_ARRAY_POINTER	GL/gl.h	1047;"	d
GL_VERTEX_ARRAY_POINTER_EXT	GL/gl.h	1104;"	d
GL_VERTEX_ARRAY_SIZE	GL/gl.h	1033;"	d
GL_VERTEX_ARRAY_SIZE_EXT	GL/gl.h	1084;"	d
GL_VERTEX_ARRAY_STRIDE	GL/gl.h	1035;"	d
GL_VERTEX_ARRAY_STRIDE_EXT	GL/gl.h	1086;"	d
GL_VERTEX_ARRAY_TYPE	GL/gl.h	1034;"	d
GL_VERTEX_ARRAY_TYPE_EXT	GL/gl.h	1085;"	d
GL_VIEWPORT	GL/gl.h	431;"	d
GL_VIEWPORT_BIT	GL/gl.h	93;"	d
GL_WIN_draw_range_elements	GL/gl.h	1073;"	d
GL_WIN_swap_hint	GL/gl.h	1072;"	d
GL_XOR	GL/gl.h	705;"	d
GL_ZERO	GL/gl.h	117;"	d
GL_ZOOM_X	GL/gl.h	511;"	d
GL_ZOOM_Y	GL/gl.h	512;"	d
GLbitfield	GL/gl.h	/^typedef unsigned int GLbitfield;$/;"	t
GLboolean	GL/gl.h	/^typedef unsigned char GLboolean;$/;"	t
GLbyte	GL/gl.h	/^typedef signed char GLbyte;$/;"	t
GLclampd	GL/gl.h	/^typedef double GLclampd;$/;"	t
GLclampf	GL/gl.h	/^typedef float GLclampf;$/;"	t
GLdouble	GL/gl.h	/^typedef double GLdouble;$/;"	t
GLenum	GL/gl.h	/^typedef unsigned int GLenum;$/;"	t
GLfloat	GL/gl.h	/^typedef float GLfloat;$/;"	t
GLint	GL/gl.h	/^typedef int GLint;$/;"	t
GLshort	GL/gl.h	/^typedef short GLshort;$/;"	t
GLsizei	GL/gl.h	/^typedef int GLsizei;$/;"	t
GLubyte	GL/gl.h	/^typedef unsigned char GLubyte;$/;"	t
GLuint	GL/gl.h	/^typedef unsigned int GLuint;$/;"	t
GLushort	GL/gl.h	/^typedef unsigned short GLushort;$/;"	t
GLvoid	GL/gl.h	/^typedef void GLvoid;$/;"	t
PFNGLADDSWAPHINTRECTWINPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLADDSWAPHINTRECTWINPROC)  (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLARRAYELEMENTARRAYEXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLARRAYELEMENTARRAYEXTPROC)(GLenum mode, GLsizei count, const GLvoid* pi);$/;"	t
PFNGLARRAYELEMENTEXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLARRAYELEMENTEXTPROC) (GLint i);$/;"	t
PFNGLCOLORPOINTEREXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);$/;"	t
PFNGLCOLORSUBTABLEEXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLCOLORSUBTABLEEXTPROC)$/;"	t
PFNGLCOLORTABLEEXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLCOLORTABLEEXTPROC)$/;"	t
PFNGLDRAWARRAYSEXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);$/;"	t
PFNGLDRAWRANGEELEMENTSWINPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLDRAWRANGEELEMENTSWINPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);$/;"	t
PFNGLEDGEFLAGPOINTEREXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer);$/;"	t
PFNGLGETCOLORTABLEEXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLGETCOLORTABLEEXTPROC)$/;"	t
PFNGLGETCOLORTABLEPARAMETERFVEXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)$/;"	t
PFNGLGETCOLORTABLEPARAMETERIVEXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)$/;"	t
PFNGLGETPOINTERVEXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLGETPOINTERVEXTPROC) (GLenum pname, GLvoid* *params);$/;"	t
PFNGLINDEXPOINTEREXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);$/;"	t
PFNGLNORMALPOINTEREXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);$/;"	t
PFNGLTEXCOORDPOINTEREXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);$/;"	t
PFNGLVERTEXPOINTEREXTPROC	GL/gl.h	/^typedef void (APIENTRY * PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);$/;"	t
WINGDIAPI	GL/glut.h	39;"	d
WINGDIAPI	GL/glut.h	40;"	d
WINGDIAPI	GL/glut.h	45;"	d
WINGDIAPI	GL/glut.h	703;"	d
_AUX_EVENTREC	GL/glaux.h	/^typedef struct _AUX_EVENTREC {$/;"	s
_AUX_EVENTREC::data	GL/glaux.h	/^    GLint data[4];$/;"	m	struct:_AUX_EVENTREC	access:public
_AUX_EVENTREC::event	GL/glaux.h	/^    GLint event;$/;"	m	struct:_AUX_EVENTREC	access:public
_AUX_RGBImageRec	GL/glaux.h	/^typedef struct _AUX_RGBImageRec {$/;"	s
_AUX_RGBImageRec::data	GL/glaux.h	/^    unsigned char *data;$/;"	m	struct:_AUX_RGBImageRec	access:public
_AUX_RGBImageRec::sizeX	GL/glaux.h	/^    GLint sizeX, sizeY;$/;"	m	struct:_AUX_RGBImageRec	access:public
_AUX_RGBImageRec::sizeY	GL/glaux.h	/^    GLint sizeX, sizeY;$/;"	m	struct:_AUX_RGBImageRec	access:public
_CRTIMP	GL/glut.h	109;"	d
_CRTIMP	GL/glut.h	113;"	d
_CRTIMP	GL/glut.h	115;"	d
_CRTIMP	GL/glut.h	713;"	d
_WCHAR_T_DEFINED	GL/glut.h	51;"	d
__GLAUX_H__	GL/glaux.h	17;"	d
__GLU_H__	GL/glu.h	20;"	d
__GL_H__	GL/gl.h	20;"	d
__cdecl	GL/glut.h	103;"	d
__cdecl	GL/glut.h	708;"	d
__gl_h_	GL/gl.h	19;"	d
__glu_h__	GL/glu.h	19;"	d
__glutCreateMenuWithExit	GL/glut.h	/^GLUTAPI int APIENTRY __glutCreateMenuWithExit(void (GLUTCALLBACK *func)(int), void (__cdecl *exitfunc)(int));$/;"	p	signature:(void (GLUTCALLBACK *func)(int), void (__cdecl *exitfunc)(int))
__glutCreateWindowWithExit	GL/glut.h	/^GLUTAPI int APIENTRY __glutCreateWindowWithExit(const char *title, void (__cdecl *exitfunc)(int));$/;"	p	signature:(const char *title, void (__cdecl *exitfunc)(int))
__glutInitWithExit	GL/glut.h	/^GLUTAPI void APIENTRY __glutInitWithExit(int *argcp, char **argv, void (__cdecl *exitfunc)(int));$/;"	p	signature:(int *argcp, char **argv, void (__cdecl *exitfunc)(int))
__glut_h__	GL/glut.h	2;"	d
auxCloseWindow	GL/glaux.h	/^void APIENTRY auxCloseWindow(void);$/;"	p	signature:(void)
auxCreateFont	GL/glaux.h	/^void APIENTRY auxCreateFont(void);$/;"	p	signature:(void)
auxDIBImageLoad	GL/glaux.h	306;"	d
auxDIBImageLoad	GL/glaux.h	308;"	d
auxDIBImageLoadA	GL/glaux.h	/^AUX_RGBImageRec * APIENTRY auxDIBImageLoadA(LPCSTR);$/;"	p	signature:(LPCSTR)
auxDIBImageLoadW	GL/glaux.h	/^AUX_RGBImageRec * APIENTRY auxDIBImageLoadW(LPCWSTR);$/;"	p	signature:(LPCWSTR)
auxDrawStr	GL/glaux.h	316;"	d
auxDrawStr	GL/glaux.h	318;"	d
auxDrawStrA	GL/glaux.h	/^void APIENTRY auxDrawStrA(LPCSTR);$/;"	p	signature:(LPCSTR)
auxDrawStrW	GL/glaux.h	/^void APIENTRY auxDrawStrW(LPCWSTR);$/;"	p	signature:(LPCWSTR)
auxExposeFunc	GL/glaux.h	/^void APIENTRY auxExposeFunc(AUXEXPOSEPROC);$/;"	p	signature:(AUXEXPOSEPROC)
auxGetColorMapSize	GL/glaux.h	/^int  APIENTRY auxGetColorMapSize(void);$/;"	p	signature:(void)
auxGetDisplayMode	GL/glaux.h	/^GLenum APIENTRY auxGetDisplayMode(void);$/;"	p	signature:(void)
auxGetDisplayModeID	GL/glaux.h	/^GLint  APIENTRY auxGetDisplayModeID(void);$/;"	p	signature:(void)
auxGetDisplayModePolicy	GL/glaux.h	/^GLenum APIENTRY auxGetDisplayModePolicy(void);$/;"	p	signature:(void)
auxGetHDC	GL/glaux.h	/^HDC   APIENTRY auxGetHDC(void);$/;"	p	signature:(void)
auxGetHGLRC	GL/glaux.h	/^HGLRC APIENTRY auxGetHGLRC(void);$/;"	p	signature:(void)
auxGetHWND	GL/glaux.h	/^HWND  APIENTRY auxGetHWND(void);$/;"	p	signature:(void)
auxGetMouseLoc	GL/glaux.h	/^void APIENTRY auxGetMouseLoc(int *, int *);$/;"	p	signature:(int *, int *)
auxIdleFunc	GL/glaux.h	/^void APIENTRY auxIdleFunc(AUXIDLEPROC);$/;"	p	signature:(AUXIDLEPROC)
auxInitDisplayMode	GL/glaux.h	/^void APIENTRY auxInitDisplayMode(GLenum);$/;"	p	signature:(GLenum)
auxInitDisplayModeID	GL/glaux.h	/^GLenum APIENTRY auxInitDisplayModeID(GLint);$/;"	p	signature:(GLint)
auxInitDisplayModePolicy	GL/glaux.h	/^void   APIENTRY auxInitDisplayModePolicy(GLenum);$/;"	p	signature:(GLenum)
auxInitPosition	GL/glaux.h	/^void APIENTRY auxInitPosition(int, int, int, int);$/;"	p	signature:(int, int, int, int)
auxInitWindow	GL/glaux.h	260;"	d
auxInitWindow	GL/glaux.h	262;"	d
auxInitWindowA	GL/glaux.h	/^GLenum APIENTRY auxInitWindowA(LPCSTR);$/;"	p	signature:(LPCSTR)
auxInitWindowW	GL/glaux.h	/^GLenum APIENTRY auxInitWindowW(LPCWSTR);$/;"	p	signature:(LPCWSTR)
auxKeyFunc	GL/glaux.h	/^void APIENTRY auxKeyFunc(int, AUXKEYPROC);$/;"	p	signature:(int, AUXKEYPROC)
auxMainLoop	GL/glaux.h	/^void APIENTRY auxMainLoop(AUXMAINPROC);$/;"	p	signature:(AUXMAINPROC)
auxMouseFunc	GL/glaux.h	/^void APIENTRY auxMouseFunc(int, int, AUXMOUSEPROC);$/;"	p	signature:(int, int, AUXMOUSEPROC)
auxQuit	GL/glaux.h	/^void APIENTRY auxQuit(void);$/;"	p	signature:(void)
auxRGBImageLoad	GL/glaux.h	298;"	d
auxRGBImageLoad	GL/glaux.h	300;"	d
auxRGBImageLoadA	GL/glaux.h	/^AUX_RGBImageRec * APIENTRY auxRGBImageLoadA(LPCSTR);$/;"	p	signature:(LPCSTR)
auxRGBImageLoadW	GL/glaux.h	/^AUX_RGBImageRec * APIENTRY auxRGBImageLoadW(LPCWSTR);$/;"	p	signature:(LPCWSTR)
auxReshapeFunc	GL/glaux.h	/^void APIENTRY auxReshapeFunc(AUXRESHAPEPROC);$/;"	p	signature:(AUXRESHAPEPROC)
auxSetFogRamp	GL/glaux.h	/^void APIENTRY auxSetFogRamp(int, int);$/;"	p	signature:(int, int)
auxSetGreyRamp	GL/glaux.h	/^void APIENTRY auxSetGreyRamp(void);$/;"	p	signature:(void)
auxSetOneColor	GL/glaux.h	/^void APIENTRY auxSetOneColor(int, float, float, float);$/;"	p	signature:(int, float, float, float)
auxSetRGBMap	GL/glaux.h	/^void APIENTRY auxSetRGBMap(int, float *);$/;"	p	signature:(int, float *)
auxSolidBox	GL/glaux.h	/^void APIENTRY auxSolidBox(GLdouble, GLdouble, GLdouble);$/;"	p	signature:(GLdouble, GLdouble, GLdouble)
auxSolidCone	GL/glaux.h	/^void APIENTRY auxSolidCone(GLdouble, GLdouble);$/;"	p	signature:(GLdouble, GLdouble)
auxSolidCube	GL/glaux.h	/^void APIENTRY auxSolidCube(GLdouble);$/;"	p	signature:(GLdouble)
auxSolidCylinder	GL/glaux.h	/^void APIENTRY auxSolidCylinder(GLdouble, GLdouble);$/;"	p	signature:(GLdouble, GLdouble)
auxSolidDodecahedron	GL/glaux.h	/^void APIENTRY auxSolidDodecahedron(GLdouble);$/;"	p	signature:(GLdouble)
auxSolidIcosahedron	GL/glaux.h	/^void APIENTRY auxSolidIcosahedron(GLdouble);$/;"	p	signature:(GLdouble)
auxSolidOctahedron	GL/glaux.h	/^void APIENTRY auxSolidOctahedron(GLdouble);$/;"	p	signature:(GLdouble)
auxSolidSphere	GL/glaux.h	/^void APIENTRY auxSolidSphere(GLdouble);$/;"	p	signature:(GLdouble)
auxSolidTeapot	GL/glaux.h	/^void APIENTRY auxSolidTeapot(GLdouble);$/;"	p	signature:(GLdouble)
auxSolidTetrahedron	GL/glaux.h	/^void APIENTRY auxSolidTetrahedron(GLdouble);$/;"	p	signature:(GLdouble)
auxSolidTorus	GL/glaux.h	/^void APIENTRY auxSolidTorus(GLdouble, GLdouble);$/;"	p	signature:(GLdouble, GLdouble)
auxSwapBuffers	GL/glaux.h	/^void APIENTRY auxSwapBuffers(void);$/;"	p	signature:(void)
auxWireBox	GL/glaux.h	/^void APIENTRY auxWireBox(GLdouble, GLdouble, GLdouble);$/;"	p	signature:(GLdouble, GLdouble, GLdouble)
auxWireCone	GL/glaux.h	/^void APIENTRY auxWireCone(GLdouble, GLdouble);$/;"	p	signature:(GLdouble, GLdouble)
auxWireCube	GL/glaux.h	/^void APIENTRY auxWireCube(GLdouble);$/;"	p	signature:(GLdouble)
auxWireCylinder	GL/glaux.h	/^void APIENTRY auxWireCylinder(GLdouble, GLdouble);$/;"	p	signature:(GLdouble, GLdouble)
auxWireDodecahedron	GL/glaux.h	/^void APIENTRY auxWireDodecahedron(GLdouble);$/;"	p	signature:(GLdouble)
auxWireIcosahedron	GL/glaux.h	/^void APIENTRY auxWireIcosahedron(GLdouble);$/;"	p	signature:(GLdouble)
auxWireOctahedron	GL/glaux.h	/^void APIENTRY auxWireOctahedron(GLdouble);$/;"	p	signature:(GLdouble)
auxWireSphere	GL/glaux.h	/^void APIENTRY auxWireSphere(GLdouble);$/;"	p	signature:(GLdouble)
auxWireTeapot	GL/glaux.h	/^void APIENTRY auxWireTeapot(GLdouble);$/;"	p	signature:(GLdouble)
auxWireTetrahedron	GL/glaux.h	/^void APIENTRY auxWireTetrahedron(GLdouble);$/;"	p	signature:(GLdouble)
auxWireTorus	GL/glaux.h	/^void APIENTRY auxWireTorus(GLdouble, GLdouble);$/;"	p	signature:(GLdouble, GLdouble)
data	GL/glaux.h	/^    GLint data[4];$/;"	m	struct:_AUX_EVENTREC	access:public
data	GL/glaux.h	/^    unsigned char *data;$/;"	m	struct:_AUX_RGBImageRec	access:public
event	GL/glaux.h	/^    GLint event;$/;"	m	struct:_AUX_EVENTREC	access:public
exit	GL/glut.h	/^extern _CRTIMP void __cdecl exit(int);$/;"	p	signature:(int)
exit	GL/glut.h	/^extern void exit(int);$/;"	p	signature:(int)
glAccum	GL/gl.h	/^WINGDIAPI void APIENTRY glAccum (GLenum op, GLfloat value);$/;"	p	signature:(GLenum op, GLfloat value)
glAlphaFunc	GL/gl.h	/^WINGDIAPI void APIENTRY glAlphaFunc (GLenum func, GLclampf ref);$/;"	p	signature:(GLenum func, GLclampf ref)
glAreTexturesResident	GL/gl.h	/^WINGDIAPI GLboolean APIENTRY glAreTexturesResident (GLsizei n, const GLuint *textures, GLboolean *residences);$/;"	p	signature:(GLsizei n, const GLuint *textures, GLboolean *residences)
glArrayElement	GL/gl.h	/^WINGDIAPI void APIENTRY glArrayElement (GLint i);$/;"	p	signature:(GLint i)
glBegin	GL/gl.h	/^WINGDIAPI void APIENTRY glBegin (GLenum mode);$/;"	p	signature:(GLenum mode)
glBindTexture	GL/gl.h	/^WINGDIAPI void APIENTRY glBindTexture (GLenum target, GLuint texture);$/;"	p	signature:(GLenum target, GLuint texture)
glBitmap	GL/gl.h	/^WINGDIAPI void APIENTRY glBitmap (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);$/;"	p	signature:(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
glBlendFunc	GL/gl.h	/^WINGDIAPI void APIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor);$/;"	p	signature:(GLenum sfactor, GLenum dfactor)
glCallList	GL/gl.h	/^WINGDIAPI void APIENTRY glCallList (GLuint list);$/;"	p	signature:(GLuint list)
glCallLists	GL/gl.h	/^WINGDIAPI void APIENTRY glCallLists (GLsizei n, GLenum type, const GLvoid *lists);$/;"	p	signature:(GLsizei n, GLenum type, const GLvoid *lists)
glClear	GL/gl.h	/^WINGDIAPI void APIENTRY glClear (GLbitfield mask);$/;"	p	signature:(GLbitfield mask)
glClearAccum	GL/gl.h	/^WINGDIAPI void APIENTRY glClearAccum (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	p	signature:(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
glClearColor	GL/gl.h	/^WINGDIAPI void APIENTRY glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);$/;"	p	signature:(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
glClearDepth	GL/gl.h	/^WINGDIAPI void APIENTRY glClearDepth (GLclampd depth);$/;"	p	signature:(GLclampd depth)
glClearIndex	GL/gl.h	/^WINGDIAPI void APIENTRY glClearIndex (GLfloat c);$/;"	p	signature:(GLfloat c)
glClearStencil	GL/gl.h	/^WINGDIAPI void APIENTRY glClearStencil (GLint s);$/;"	p	signature:(GLint s)
glClipPlane	GL/gl.h	/^WINGDIAPI void APIENTRY glClipPlane (GLenum plane, const GLdouble *equation);$/;"	p	signature:(GLenum plane, const GLdouble *equation)
glColor3b	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3b (GLbyte red, GLbyte green, GLbyte blue);$/;"	p	signature:(GLbyte red, GLbyte green, GLbyte blue)
glColor3bv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3bv (const GLbyte *v);$/;"	p	signature:(const GLbyte *v)
glColor3d	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3d (GLdouble red, GLdouble green, GLdouble blue);$/;"	p	signature:(GLdouble red, GLdouble green, GLdouble blue)
glColor3dv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glColor3f	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3f (GLfloat red, GLfloat green, GLfloat blue);$/;"	p	signature:(GLfloat red, GLfloat green, GLfloat blue)
glColor3fv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glColor3i	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3i (GLint red, GLint green, GLint blue);$/;"	p	signature:(GLint red, GLint green, GLint blue)
glColor3iv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glColor3s	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3s (GLshort red, GLshort green, GLshort blue);$/;"	p	signature:(GLshort red, GLshort green, GLshort blue)
glColor3sv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glColor3ub	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3ub (GLubyte red, GLubyte green, GLubyte blue);$/;"	p	signature:(GLubyte red, GLubyte green, GLubyte blue)
glColor3ubv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3ubv (const GLubyte *v);$/;"	p	signature:(const GLubyte *v)
glColor3ui	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3ui (GLuint red, GLuint green, GLuint blue);$/;"	p	signature:(GLuint red, GLuint green, GLuint blue)
glColor3uiv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3uiv (const GLuint *v);$/;"	p	signature:(const GLuint *v)
glColor3us	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3us (GLushort red, GLushort green, GLushort blue);$/;"	p	signature:(GLushort red, GLushort green, GLushort blue)
glColor3usv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor3usv (const GLushort *v);$/;"	p	signature:(const GLushort *v)
glColor4b	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4b (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);$/;"	p	signature:(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
glColor4bv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4bv (const GLbyte *v);$/;"	p	signature:(const GLbyte *v)
glColor4d	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4d (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);$/;"	p	signature:(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
glColor4dv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glColor4f	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	p	signature:(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
glColor4fv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glColor4i	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4i (GLint red, GLint green, GLint blue, GLint alpha);$/;"	p	signature:(GLint red, GLint green, GLint blue, GLint alpha)
glColor4iv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glColor4s	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4s (GLshort red, GLshort green, GLshort blue, GLshort alpha);$/;"	p	signature:(GLshort red, GLshort green, GLshort blue, GLshort alpha)
glColor4sv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glColor4ub	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4ub (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);$/;"	p	signature:(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
glColor4ubv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4ubv (const GLubyte *v);$/;"	p	signature:(const GLubyte *v)
glColor4ui	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4ui (GLuint red, GLuint green, GLuint blue, GLuint alpha);$/;"	p	signature:(GLuint red, GLuint green, GLuint blue, GLuint alpha)
glColor4uiv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4uiv (const GLuint *v);$/;"	p	signature:(const GLuint *v)
glColor4us	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4us (GLushort red, GLushort green, GLushort blue, GLushort alpha);$/;"	p	signature:(GLushort red, GLushort green, GLushort blue, GLushort alpha)
glColor4usv	GL/gl.h	/^WINGDIAPI void APIENTRY glColor4usv (const GLushort *v);$/;"	p	signature:(const GLushort *v)
glColorMask	GL/gl.h	/^WINGDIAPI void APIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);$/;"	p	signature:(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
glColorMaterial	GL/gl.h	/^WINGDIAPI void APIENTRY glColorMaterial (GLenum face, GLenum mode);$/;"	p	signature:(GLenum face, GLenum mode)
glColorPointer	GL/gl.h	/^WINGDIAPI void APIENTRY glColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);$/;"	p	signature:(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
glCopyPixels	GL/gl.h	/^WINGDIAPI void APIENTRY glCopyPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
glCopyTexImage1D	GL/gl.h	/^WINGDIAPI void APIENTRY glCopyTexImage1D (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);$/;"	p	signature:(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border)
glCopyTexImage2D	GL/gl.h	/^WINGDIAPI void APIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);$/;"	p	signature:(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
glCopyTexSubImage1D	GL/gl.h	/^WINGDIAPI void APIENTRY glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
glCopyTexSubImage2D	GL/gl.h	/^WINGDIAPI void APIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
glCullFace	GL/gl.h	/^WINGDIAPI void APIENTRY glCullFace (GLenum mode);$/;"	p	signature:(GLenum mode)
glDeleteLists	GL/gl.h	/^WINGDIAPI void APIENTRY glDeleteLists (GLuint list, GLsizei range);$/;"	p	signature:(GLuint list, GLsizei range)
glDeleteTextures	GL/gl.h	/^WINGDIAPI void APIENTRY glDeleteTextures (GLsizei n, const GLuint *textures);$/;"	p	signature:(GLsizei n, const GLuint *textures)
glDepthFunc	GL/gl.h	/^WINGDIAPI void APIENTRY glDepthFunc (GLenum func);$/;"	p	signature:(GLenum func)
glDepthMask	GL/gl.h	/^WINGDIAPI void APIENTRY glDepthMask (GLboolean flag);$/;"	p	signature:(GLboolean flag)
glDepthRange	GL/gl.h	/^WINGDIAPI void APIENTRY glDepthRange (GLclampd zNear, GLclampd zFar);$/;"	p	signature:(GLclampd zNear, GLclampd zFar)
glDisable	GL/gl.h	/^WINGDIAPI void APIENTRY glDisable (GLenum cap);$/;"	p	signature:(GLenum cap)
glDisableClientState	GL/gl.h	/^WINGDIAPI void APIENTRY glDisableClientState (GLenum array);$/;"	p	signature:(GLenum array)
glDrawArrays	GL/gl.h	/^WINGDIAPI void APIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count);$/;"	p	signature:(GLenum mode, GLint first, GLsizei count)
glDrawBuffer	GL/gl.h	/^WINGDIAPI void APIENTRY glDrawBuffer (GLenum mode);$/;"	p	signature:(GLenum mode)
glDrawElements	GL/gl.h	/^WINGDIAPI void APIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);$/;"	p	signature:(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
glDrawPixels	GL/gl.h	/^WINGDIAPI void APIENTRY glDrawPixels (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);$/;"	p	signature:(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
glEdgeFlag	GL/gl.h	/^WINGDIAPI void APIENTRY glEdgeFlag (GLboolean flag);$/;"	p	signature:(GLboolean flag)
glEdgeFlagPointer	GL/gl.h	/^WINGDIAPI void APIENTRY glEdgeFlagPointer (GLsizei stride, const GLvoid *pointer);$/;"	p	signature:(GLsizei stride, const GLvoid *pointer)
glEdgeFlagv	GL/gl.h	/^WINGDIAPI void APIENTRY glEdgeFlagv (const GLboolean *flag);$/;"	p	signature:(const GLboolean *flag)
glEnable	GL/gl.h	/^WINGDIAPI void APIENTRY glEnable (GLenum cap);$/;"	p	signature:(GLenum cap)
glEnableClientState	GL/gl.h	/^WINGDIAPI void APIENTRY glEnableClientState (GLenum array);$/;"	p	signature:(GLenum array)
glEnd	GL/gl.h	/^WINGDIAPI void APIENTRY glEnd (void);$/;"	p	signature:(void)
glEndList	GL/gl.h	/^WINGDIAPI void APIENTRY glEndList (void);$/;"	p	signature:(void)
glEvalCoord1d	GL/gl.h	/^WINGDIAPI void APIENTRY glEvalCoord1d (GLdouble u);$/;"	p	signature:(GLdouble u)
glEvalCoord1dv	GL/gl.h	/^WINGDIAPI void APIENTRY glEvalCoord1dv (const GLdouble *u);$/;"	p	signature:(const GLdouble *u)
glEvalCoord1f	GL/gl.h	/^WINGDIAPI void APIENTRY glEvalCoord1f (GLfloat u);$/;"	p	signature:(GLfloat u)
glEvalCoord1fv	GL/gl.h	/^WINGDIAPI void APIENTRY glEvalCoord1fv (const GLfloat *u);$/;"	p	signature:(const GLfloat *u)
glEvalCoord2d	GL/gl.h	/^WINGDIAPI void APIENTRY glEvalCoord2d (GLdouble u, GLdouble v);$/;"	p	signature:(GLdouble u, GLdouble v)
glEvalCoord2dv	GL/gl.h	/^WINGDIAPI void APIENTRY glEvalCoord2dv (const GLdouble *u);$/;"	p	signature:(const GLdouble *u)
glEvalCoord2f	GL/gl.h	/^WINGDIAPI void APIENTRY glEvalCoord2f (GLfloat u, GLfloat v);$/;"	p	signature:(GLfloat u, GLfloat v)
glEvalCoord2fv	GL/gl.h	/^WINGDIAPI void APIENTRY glEvalCoord2fv (const GLfloat *u);$/;"	p	signature:(const GLfloat *u)
glEvalMesh1	GL/gl.h	/^WINGDIAPI void APIENTRY glEvalMesh1 (GLenum mode, GLint i1, GLint i2);$/;"	p	signature:(GLenum mode, GLint i1, GLint i2)
glEvalMesh2	GL/gl.h	/^WINGDIAPI void APIENTRY glEvalMesh2 (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);$/;"	p	signature:(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
glEvalPoint1	GL/gl.h	/^WINGDIAPI void APIENTRY glEvalPoint1 (GLint i);$/;"	p	signature:(GLint i)
glEvalPoint2	GL/gl.h	/^WINGDIAPI void APIENTRY glEvalPoint2 (GLint i, GLint j);$/;"	p	signature:(GLint i, GLint j)
glFeedbackBuffer	GL/gl.h	/^WINGDIAPI void APIENTRY glFeedbackBuffer (GLsizei size, GLenum type, GLfloat *buffer);$/;"	p	signature:(GLsizei size, GLenum type, GLfloat *buffer)
glFinish	GL/gl.h	/^WINGDIAPI void APIENTRY glFinish (void);$/;"	p	signature:(void)
glFlush	GL/gl.h	/^WINGDIAPI void APIENTRY glFlush (void);$/;"	p	signature:(void)
glFogf	GL/gl.h	/^WINGDIAPI void APIENTRY glFogf (GLenum pname, GLfloat param);$/;"	p	signature:(GLenum pname, GLfloat param)
glFogfv	GL/gl.h	/^WINGDIAPI void APIENTRY glFogfv (GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum pname, const GLfloat *params)
glFogi	GL/gl.h	/^WINGDIAPI void APIENTRY glFogi (GLenum pname, GLint param);$/;"	p	signature:(GLenum pname, GLint param)
glFogiv	GL/gl.h	/^WINGDIAPI void APIENTRY glFogiv (GLenum pname, const GLint *params);$/;"	p	signature:(GLenum pname, const GLint *params)
glFrontFace	GL/gl.h	/^WINGDIAPI void APIENTRY glFrontFace (GLenum mode);$/;"	p	signature:(GLenum mode)
glFrustum	GL/gl.h	/^WINGDIAPI void APIENTRY glFrustum (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);$/;"	p	signature:(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
glGenLists	GL/gl.h	/^WINGDIAPI GLuint APIENTRY glGenLists (GLsizei range);$/;"	p	signature:(GLsizei range)
glGenTextures	GL/gl.h	/^WINGDIAPI void APIENTRY glGenTextures (GLsizei n, GLuint *textures);$/;"	p	signature:(GLsizei n, GLuint *textures)
glGetBooleanv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetBooleanv (GLenum pname, GLboolean *params);$/;"	p	signature:(GLenum pname, GLboolean *params)
glGetClipPlane	GL/gl.h	/^WINGDIAPI void APIENTRY glGetClipPlane (GLenum plane, GLdouble *equation);$/;"	p	signature:(GLenum plane, GLdouble *equation)
glGetDoublev	GL/gl.h	/^WINGDIAPI void APIENTRY glGetDoublev (GLenum pname, GLdouble *params);$/;"	p	signature:(GLenum pname, GLdouble *params)
glGetError	GL/gl.h	/^WINGDIAPI GLenum APIENTRY glGetError (void);$/;"	p	signature:(void)
glGetFloatv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetFloatv (GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum pname, GLfloat *params)
glGetIntegerv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetIntegerv (GLenum pname, GLint *params);$/;"	p	signature:(GLenum pname, GLint *params)
glGetLightfv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetLightfv (GLenum light, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum light, GLenum pname, GLfloat *params)
glGetLightiv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetLightiv (GLenum light, GLenum pname, GLint *params);$/;"	p	signature:(GLenum light, GLenum pname, GLint *params)
glGetMapdv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetMapdv (GLenum target, GLenum query, GLdouble *v);$/;"	p	signature:(GLenum target, GLenum query, GLdouble *v)
glGetMapfv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetMapfv (GLenum target, GLenum query, GLfloat *v);$/;"	p	signature:(GLenum target, GLenum query, GLfloat *v)
glGetMapiv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetMapiv (GLenum target, GLenum query, GLint *v);$/;"	p	signature:(GLenum target, GLenum query, GLint *v)
glGetMaterialfv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetMaterialfv (GLenum face, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum face, GLenum pname, GLfloat *params)
glGetMaterialiv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetMaterialiv (GLenum face, GLenum pname, GLint *params);$/;"	p	signature:(GLenum face, GLenum pname, GLint *params)
glGetPixelMapfv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetPixelMapfv (GLenum map, GLfloat *values);$/;"	p	signature:(GLenum map, GLfloat *values)
glGetPixelMapuiv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetPixelMapuiv (GLenum map, GLuint *values);$/;"	p	signature:(GLenum map, GLuint *values)
glGetPixelMapusv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetPixelMapusv (GLenum map, GLushort *values);$/;"	p	signature:(GLenum map, GLushort *values)
glGetPointerv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetPointerv (GLenum pname, GLvoid* *params);$/;"	p	signature:(GLenum pname, GLvoid* *params)
glGetPolygonStipple	GL/gl.h	/^WINGDIAPI void APIENTRY glGetPolygonStipple (GLubyte *mask);$/;"	p	signature:(GLubyte *mask)
glGetString	GL/gl.h	/^WINGDIAPI const GLubyte * APIENTRY glGetString (GLenum name);$/;"	p	signature:(GLenum name)
glGetTexEnvfv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetTexEnvfv (GLenum target, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum target, GLenum pname, GLfloat *params)
glGetTexEnviv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetTexEnviv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glGetTexGendv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetTexGendv (GLenum coord, GLenum pname, GLdouble *params);$/;"	p	signature:(GLenum coord, GLenum pname, GLdouble *params)
glGetTexGenfv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetTexGenfv (GLenum coord, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum coord, GLenum pname, GLfloat *params)
glGetTexGeniv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetTexGeniv (GLenum coord, GLenum pname, GLint *params);$/;"	p	signature:(GLenum coord, GLenum pname, GLint *params)
glGetTexImage	GL/gl.h	/^WINGDIAPI void APIENTRY glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);$/;"	p	signature:(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
glGetTexLevelParameterfv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum target, GLint level, GLenum pname, GLfloat *params)
glGetTexLevelParameteriv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLint level, GLenum pname, GLint *params)
glGetTexParameterfv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum target, GLenum pname, GLfloat *params)
glGetTexParameteriv	GL/gl.h	/^WINGDIAPI void APIENTRY glGetTexParameteriv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glHint	GL/gl.h	/^WINGDIAPI void APIENTRY glHint (GLenum target, GLenum mode);$/;"	p	signature:(GLenum target, GLenum mode)
glIndexMask	GL/gl.h	/^WINGDIAPI void APIENTRY glIndexMask (GLuint mask);$/;"	p	signature:(GLuint mask)
glIndexPointer	GL/gl.h	/^WINGDIAPI void APIENTRY glIndexPointer (GLenum type, GLsizei stride, const GLvoid *pointer);$/;"	p	signature:(GLenum type, GLsizei stride, const GLvoid *pointer)
glIndexd	GL/gl.h	/^WINGDIAPI void APIENTRY glIndexd (GLdouble c);$/;"	p	signature:(GLdouble c)
glIndexdv	GL/gl.h	/^WINGDIAPI void APIENTRY glIndexdv (const GLdouble *c);$/;"	p	signature:(const GLdouble *c)
glIndexf	GL/gl.h	/^WINGDIAPI void APIENTRY glIndexf (GLfloat c);$/;"	p	signature:(GLfloat c)
glIndexfv	GL/gl.h	/^WINGDIAPI void APIENTRY glIndexfv (const GLfloat *c);$/;"	p	signature:(const GLfloat *c)
glIndexi	GL/gl.h	/^WINGDIAPI void APIENTRY glIndexi (GLint c);$/;"	p	signature:(GLint c)
glIndexiv	GL/gl.h	/^WINGDIAPI void APIENTRY glIndexiv (const GLint *c);$/;"	p	signature:(const GLint *c)
glIndexs	GL/gl.h	/^WINGDIAPI void APIENTRY glIndexs (GLshort c);$/;"	p	signature:(GLshort c)
glIndexsv	GL/gl.h	/^WINGDIAPI void APIENTRY glIndexsv (const GLshort *c);$/;"	p	signature:(const GLshort *c)
glIndexub	GL/gl.h	/^WINGDIAPI void APIENTRY glIndexub (GLubyte c);$/;"	p	signature:(GLubyte c)
glIndexubv	GL/gl.h	/^WINGDIAPI void APIENTRY glIndexubv (const GLubyte *c);$/;"	p	signature:(const GLubyte *c)
glInitNames	GL/gl.h	/^WINGDIAPI void APIENTRY glInitNames (void);$/;"	p	signature:(void)
glInterleavedArrays	GL/gl.h	/^WINGDIAPI void APIENTRY glInterleavedArrays (GLenum format, GLsizei stride, const GLvoid *pointer);$/;"	p	signature:(GLenum format, GLsizei stride, const GLvoid *pointer)
glIsEnabled	GL/gl.h	/^WINGDIAPI GLboolean APIENTRY glIsEnabled (GLenum cap);$/;"	p	signature:(GLenum cap)
glIsList	GL/gl.h	/^WINGDIAPI GLboolean APIENTRY glIsList (GLuint list);$/;"	p	signature:(GLuint list)
glIsTexture	GL/gl.h	/^WINGDIAPI GLboolean APIENTRY glIsTexture (GLuint texture);$/;"	p	signature:(GLuint texture)
glLightModelf	GL/gl.h	/^WINGDIAPI void APIENTRY glLightModelf (GLenum pname, GLfloat param);$/;"	p	signature:(GLenum pname, GLfloat param)
glLightModelfv	GL/gl.h	/^WINGDIAPI void APIENTRY glLightModelfv (GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum pname, const GLfloat *params)
glLightModeli	GL/gl.h	/^WINGDIAPI void APIENTRY glLightModeli (GLenum pname, GLint param);$/;"	p	signature:(GLenum pname, GLint param)
glLightModeliv	GL/gl.h	/^WINGDIAPI void APIENTRY glLightModeliv (GLenum pname, const GLint *params);$/;"	p	signature:(GLenum pname, const GLint *params)
glLightf	GL/gl.h	/^WINGDIAPI void APIENTRY glLightf (GLenum light, GLenum pname, GLfloat param);$/;"	p	signature:(GLenum light, GLenum pname, GLfloat param)
glLightfv	GL/gl.h	/^WINGDIAPI void APIENTRY glLightfv (GLenum light, GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum light, GLenum pname, const GLfloat *params)
glLighti	GL/gl.h	/^WINGDIAPI void APIENTRY glLighti (GLenum light, GLenum pname, GLint param);$/;"	p	signature:(GLenum light, GLenum pname, GLint param)
glLightiv	GL/gl.h	/^WINGDIAPI void APIENTRY glLightiv (GLenum light, GLenum pname, const GLint *params);$/;"	p	signature:(GLenum light, GLenum pname, const GLint *params)
glLineStipple	GL/gl.h	/^WINGDIAPI void APIENTRY glLineStipple (GLint factor, GLushort pattern);$/;"	p	signature:(GLint factor, GLushort pattern)
glLineWidth	GL/gl.h	/^WINGDIAPI void APIENTRY glLineWidth (GLfloat width);$/;"	p	signature:(GLfloat width)
glListBase	GL/gl.h	/^WINGDIAPI void APIENTRY glListBase (GLuint base);$/;"	p	signature:(GLuint base)
glLoadIdentity	GL/gl.h	/^WINGDIAPI void APIENTRY glLoadIdentity (void);$/;"	p	signature:(void)
glLoadMatrixd	GL/gl.h	/^WINGDIAPI void APIENTRY glLoadMatrixd (const GLdouble *m);$/;"	p	signature:(const GLdouble *m)
glLoadMatrixf	GL/gl.h	/^WINGDIAPI void APIENTRY glLoadMatrixf (const GLfloat *m);$/;"	p	signature:(const GLfloat *m)
glLoadName	GL/gl.h	/^WINGDIAPI void APIENTRY glLoadName (GLuint name);$/;"	p	signature:(GLuint name)
glLogicOp	GL/gl.h	/^WINGDIAPI void APIENTRY glLogicOp (GLenum opcode);$/;"	p	signature:(GLenum opcode)
glMap1d	GL/gl.h	/^WINGDIAPI void APIENTRY glMap1d (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);$/;"	p	signature:(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
glMap1f	GL/gl.h	/^WINGDIAPI void APIENTRY glMap1f (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);$/;"	p	signature:(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
glMap2d	GL/gl.h	/^WINGDIAPI void APIENTRY glMap2d (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);$/;"	p	signature:(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
glMap2f	GL/gl.h	/^WINGDIAPI void APIENTRY glMap2f (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);$/;"	p	signature:(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
glMapGrid1d	GL/gl.h	/^WINGDIAPI void APIENTRY glMapGrid1d (GLint un, GLdouble u1, GLdouble u2);$/;"	p	signature:(GLint un, GLdouble u1, GLdouble u2)
glMapGrid1f	GL/gl.h	/^WINGDIAPI void APIENTRY glMapGrid1f (GLint un, GLfloat u1, GLfloat u2);$/;"	p	signature:(GLint un, GLfloat u1, GLfloat u2)
glMapGrid2d	GL/gl.h	/^WINGDIAPI void APIENTRY glMapGrid2d (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);$/;"	p	signature:(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
glMapGrid2f	GL/gl.h	/^WINGDIAPI void APIENTRY glMapGrid2f (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);$/;"	p	signature:(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
glMaterialf	GL/gl.h	/^WINGDIAPI void APIENTRY glMaterialf (GLenum face, GLenum pname, GLfloat param);$/;"	p	signature:(GLenum face, GLenum pname, GLfloat param)
glMaterialfv	GL/gl.h	/^WINGDIAPI void APIENTRY glMaterialfv (GLenum face, GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum face, GLenum pname, const GLfloat *params)
glMateriali	GL/gl.h	/^WINGDIAPI void APIENTRY glMateriali (GLenum face, GLenum pname, GLint param);$/;"	p	signature:(GLenum face, GLenum pname, GLint param)
glMaterialiv	GL/gl.h	/^WINGDIAPI void APIENTRY glMaterialiv (GLenum face, GLenum pname, const GLint *params);$/;"	p	signature:(GLenum face, GLenum pname, const GLint *params)
glMatrixMode	GL/gl.h	/^WINGDIAPI void APIENTRY glMatrixMode (GLenum mode);$/;"	p	signature:(GLenum mode)
glMultMatrixd	GL/gl.h	/^WINGDIAPI void APIENTRY glMultMatrixd (const GLdouble *m);$/;"	p	signature:(const GLdouble *m)
glMultMatrixf	GL/gl.h	/^WINGDIAPI void APIENTRY glMultMatrixf (const GLfloat *m);$/;"	p	signature:(const GLfloat *m)
glNewList	GL/gl.h	/^WINGDIAPI void APIENTRY glNewList (GLuint list, GLenum mode);$/;"	p	signature:(GLuint list, GLenum mode)
glNormal3b	GL/gl.h	/^WINGDIAPI void APIENTRY glNormal3b (GLbyte nx, GLbyte ny, GLbyte nz);$/;"	p	signature:(GLbyte nx, GLbyte ny, GLbyte nz)
glNormal3bv	GL/gl.h	/^WINGDIAPI void APIENTRY glNormal3bv (const GLbyte *v);$/;"	p	signature:(const GLbyte *v)
glNormal3d	GL/gl.h	/^WINGDIAPI void APIENTRY glNormal3d (GLdouble nx, GLdouble ny, GLdouble nz);$/;"	p	signature:(GLdouble nx, GLdouble ny, GLdouble nz)
glNormal3dv	GL/gl.h	/^WINGDIAPI void APIENTRY glNormal3dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glNormal3f	GL/gl.h	/^WINGDIAPI void APIENTRY glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz);$/;"	p	signature:(GLfloat nx, GLfloat ny, GLfloat nz)
glNormal3fv	GL/gl.h	/^WINGDIAPI void APIENTRY glNormal3fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glNormal3i	GL/gl.h	/^WINGDIAPI void APIENTRY glNormal3i (GLint nx, GLint ny, GLint nz);$/;"	p	signature:(GLint nx, GLint ny, GLint nz)
glNormal3iv	GL/gl.h	/^WINGDIAPI void APIENTRY glNormal3iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glNormal3s	GL/gl.h	/^WINGDIAPI void APIENTRY glNormal3s (GLshort nx, GLshort ny, GLshort nz);$/;"	p	signature:(GLshort nx, GLshort ny, GLshort nz)
glNormal3sv	GL/gl.h	/^WINGDIAPI void APIENTRY glNormal3sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glNormalPointer	GL/gl.h	/^WINGDIAPI void APIENTRY glNormalPointer (GLenum type, GLsizei stride, const GLvoid *pointer);$/;"	p	signature:(GLenum type, GLsizei stride, const GLvoid *pointer)
glOrtho	GL/gl.h	/^WINGDIAPI void APIENTRY glOrtho (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);$/;"	p	signature:(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
glPassThrough	GL/gl.h	/^WINGDIAPI void APIENTRY glPassThrough (GLfloat token);$/;"	p	signature:(GLfloat token)
glPixelMapfv	GL/gl.h	/^WINGDIAPI void APIENTRY glPixelMapfv (GLenum map, GLsizei mapsize, const GLfloat *values);$/;"	p	signature:(GLenum map, GLsizei mapsize, const GLfloat *values)
glPixelMapuiv	GL/gl.h	/^WINGDIAPI void APIENTRY glPixelMapuiv (GLenum map, GLsizei mapsize, const GLuint *values);$/;"	p	signature:(GLenum map, GLsizei mapsize, const GLuint *values)
glPixelMapusv	GL/gl.h	/^WINGDIAPI void APIENTRY glPixelMapusv (GLenum map, GLsizei mapsize, const GLushort *values);$/;"	p	signature:(GLenum map, GLsizei mapsize, const GLushort *values)
glPixelStoref	GL/gl.h	/^WINGDIAPI void APIENTRY glPixelStoref (GLenum pname, GLfloat param);$/;"	p	signature:(GLenum pname, GLfloat param)
glPixelStorei	GL/gl.h	/^WINGDIAPI void APIENTRY glPixelStorei (GLenum pname, GLint param);$/;"	p	signature:(GLenum pname, GLint param)
glPixelTransferf	GL/gl.h	/^WINGDIAPI void APIENTRY glPixelTransferf (GLenum pname, GLfloat param);$/;"	p	signature:(GLenum pname, GLfloat param)
glPixelTransferi	GL/gl.h	/^WINGDIAPI void APIENTRY glPixelTransferi (GLenum pname, GLint param);$/;"	p	signature:(GLenum pname, GLint param)
glPixelZoom	GL/gl.h	/^WINGDIAPI void APIENTRY glPixelZoom (GLfloat xfactor, GLfloat yfactor);$/;"	p	signature:(GLfloat xfactor, GLfloat yfactor)
glPointSize	GL/gl.h	/^WINGDIAPI void APIENTRY glPointSize (GLfloat size);$/;"	p	signature:(GLfloat size)
glPolygonMode	GL/gl.h	/^WINGDIAPI void APIENTRY glPolygonMode (GLenum face, GLenum mode);$/;"	p	signature:(GLenum face, GLenum mode)
glPolygonOffset	GL/gl.h	/^WINGDIAPI void APIENTRY glPolygonOffset (GLfloat factor, GLfloat units);$/;"	p	signature:(GLfloat factor, GLfloat units)
glPolygonStipple	GL/gl.h	/^WINGDIAPI void APIENTRY glPolygonStipple (const GLubyte *mask);$/;"	p	signature:(const GLubyte *mask)
glPopAttrib	GL/gl.h	/^WINGDIAPI void APIENTRY glPopAttrib (void);$/;"	p	signature:(void)
glPopClientAttrib	GL/gl.h	/^WINGDIAPI void APIENTRY glPopClientAttrib (void);$/;"	p	signature:(void)
glPopMatrix	GL/gl.h	/^WINGDIAPI void APIENTRY glPopMatrix (void);$/;"	p	signature:(void)
glPopName	GL/gl.h	/^WINGDIAPI void APIENTRY glPopName (void);$/;"	p	signature:(void)
glPrioritizeTextures	GL/gl.h	/^WINGDIAPI void APIENTRY glPrioritizeTextures (GLsizei n, const GLuint *textures, const GLclampf *priorities);$/;"	p	signature:(GLsizei n, const GLuint *textures, const GLclampf *priorities)
glPushAttrib	GL/gl.h	/^WINGDIAPI void APIENTRY glPushAttrib (GLbitfield mask);$/;"	p	signature:(GLbitfield mask)
glPushClientAttrib	GL/gl.h	/^WINGDIAPI void APIENTRY glPushClientAttrib (GLbitfield mask);$/;"	p	signature:(GLbitfield mask)
glPushMatrix	GL/gl.h	/^WINGDIAPI void APIENTRY glPushMatrix (void);$/;"	p	signature:(void)
glPushName	GL/gl.h	/^WINGDIAPI void APIENTRY glPushName (GLuint name);$/;"	p	signature:(GLuint name)
glRasterPos2d	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos2d (GLdouble x, GLdouble y);$/;"	p	signature:(GLdouble x, GLdouble y)
glRasterPos2dv	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos2dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glRasterPos2f	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos2f (GLfloat x, GLfloat y);$/;"	p	signature:(GLfloat x, GLfloat y)
glRasterPos2fv	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos2fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glRasterPos2i	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos2i (GLint x, GLint y);$/;"	p	signature:(GLint x, GLint y)
glRasterPos2iv	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos2iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glRasterPos2s	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos2s (GLshort x, GLshort y);$/;"	p	signature:(GLshort x, GLshort y)
glRasterPos2sv	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos2sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glRasterPos3d	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos3d (GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLdouble x, GLdouble y, GLdouble z)
glRasterPos3dv	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos3dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glRasterPos3f	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos3f (GLfloat x, GLfloat y, GLfloat z);$/;"	p	signature:(GLfloat x, GLfloat y, GLfloat z)
glRasterPos3fv	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos3fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glRasterPos3i	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos3i (GLint x, GLint y, GLint z);$/;"	p	signature:(GLint x, GLint y, GLint z)
glRasterPos3iv	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos3iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glRasterPos3s	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos3s (GLshort x, GLshort y, GLshort z);$/;"	p	signature:(GLshort x, GLshort y, GLshort z)
glRasterPos3sv	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos3sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glRasterPos4d	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	p	signature:(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
glRasterPos4dv	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos4dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glRasterPos4f	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	p	signature:(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
glRasterPos4fv	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos4fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glRasterPos4i	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos4i (GLint x, GLint y, GLint z, GLint w);$/;"	p	signature:(GLint x, GLint y, GLint z, GLint w)
glRasterPos4iv	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos4iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glRasterPos4s	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos4s (GLshort x, GLshort y, GLshort z, GLshort w);$/;"	p	signature:(GLshort x, GLshort y, GLshort z, GLshort w)
glRasterPos4sv	GL/gl.h	/^WINGDIAPI void APIENTRY glRasterPos4sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glReadBuffer	GL/gl.h	/^WINGDIAPI void APIENTRY glReadBuffer (GLenum mode);$/;"	p	signature:(GLenum mode)
glReadPixels	GL/gl.h	/^WINGDIAPI void APIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
glRectd	GL/gl.h	/^WINGDIAPI void APIENTRY glRectd (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);$/;"	p	signature:(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
glRectdv	GL/gl.h	/^WINGDIAPI void APIENTRY glRectdv (const GLdouble *v1, const GLdouble *v2);$/;"	p	signature:(const GLdouble *v1, const GLdouble *v2)
glRectf	GL/gl.h	/^WINGDIAPI void APIENTRY glRectf (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);$/;"	p	signature:(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
glRectfv	GL/gl.h	/^WINGDIAPI void APIENTRY glRectfv (const GLfloat *v1, const GLfloat *v2);$/;"	p	signature:(const GLfloat *v1, const GLfloat *v2)
glRecti	GL/gl.h	/^WINGDIAPI void APIENTRY glRecti (GLint x1, GLint y1, GLint x2, GLint y2);$/;"	p	signature:(GLint x1, GLint y1, GLint x2, GLint y2)
glRectiv	GL/gl.h	/^WINGDIAPI void APIENTRY glRectiv (const GLint *v1, const GLint *v2);$/;"	p	signature:(const GLint *v1, const GLint *v2)
glRects	GL/gl.h	/^WINGDIAPI void APIENTRY glRects (GLshort x1, GLshort y1, GLshort x2, GLshort y2);$/;"	p	signature:(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
glRectsv	GL/gl.h	/^WINGDIAPI void APIENTRY glRectsv (const GLshort *v1, const GLshort *v2);$/;"	p	signature:(const GLshort *v1, const GLshort *v2)
glRenderMode	GL/gl.h	/^WINGDIAPI GLint APIENTRY glRenderMode (GLenum mode);$/;"	p	signature:(GLenum mode)
glRotated	GL/gl.h	/^WINGDIAPI void APIENTRY glRotated (GLdouble angle, GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
glRotatef	GL/gl.h	/^WINGDIAPI void APIENTRY glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);$/;"	p	signature:(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
glScaled	GL/gl.h	/^WINGDIAPI void APIENTRY glScaled (GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLdouble x, GLdouble y, GLdouble z)
glScalef	GL/gl.h	/^WINGDIAPI void APIENTRY glScalef (GLfloat x, GLfloat y, GLfloat z);$/;"	p	signature:(GLfloat x, GLfloat y, GLfloat z)
glScissor	GL/gl.h	/^WINGDIAPI void APIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height)
glSelectBuffer	GL/gl.h	/^WINGDIAPI void APIENTRY glSelectBuffer (GLsizei size, GLuint *buffer);$/;"	p	signature:(GLsizei size, GLuint *buffer)
glShadeModel	GL/gl.h	/^WINGDIAPI void APIENTRY glShadeModel (GLenum mode);$/;"	p	signature:(GLenum mode)
glStencilFunc	GL/gl.h	/^WINGDIAPI void APIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask);$/;"	p	signature:(GLenum func, GLint ref, GLuint mask)
glStencilMask	GL/gl.h	/^WINGDIAPI void APIENTRY glStencilMask (GLuint mask);$/;"	p	signature:(GLuint mask)
glStencilOp	GL/gl.h	/^WINGDIAPI void APIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);$/;"	p	signature:(GLenum fail, GLenum zfail, GLenum zpass)
glTexCoord1d	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord1d (GLdouble s);$/;"	p	signature:(GLdouble s)
glTexCoord1dv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord1dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glTexCoord1f	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord1f (GLfloat s);$/;"	p	signature:(GLfloat s)
glTexCoord1fv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord1fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glTexCoord1i	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord1i (GLint s);$/;"	p	signature:(GLint s)
glTexCoord1iv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord1iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glTexCoord1s	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord1s (GLshort s);$/;"	p	signature:(GLshort s)
glTexCoord1sv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord1sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glTexCoord2d	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord2d (GLdouble s, GLdouble t);$/;"	p	signature:(GLdouble s, GLdouble t)
glTexCoord2dv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord2dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glTexCoord2f	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord2f (GLfloat s, GLfloat t);$/;"	p	signature:(GLfloat s, GLfloat t)
glTexCoord2fv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord2fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glTexCoord2i	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord2i (GLint s, GLint t);$/;"	p	signature:(GLint s, GLint t)
glTexCoord2iv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord2iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glTexCoord2s	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord2s (GLshort s, GLshort t);$/;"	p	signature:(GLshort s, GLshort t)
glTexCoord2sv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord2sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glTexCoord3d	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord3d (GLdouble s, GLdouble t, GLdouble r);$/;"	p	signature:(GLdouble s, GLdouble t, GLdouble r)
glTexCoord3dv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord3dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glTexCoord3f	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord3f (GLfloat s, GLfloat t, GLfloat r);$/;"	p	signature:(GLfloat s, GLfloat t, GLfloat r)
glTexCoord3fv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord3fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glTexCoord3i	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord3i (GLint s, GLint t, GLint r);$/;"	p	signature:(GLint s, GLint t, GLint r)
glTexCoord3iv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord3iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glTexCoord3s	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord3s (GLshort s, GLshort t, GLshort r);$/;"	p	signature:(GLshort s, GLshort t, GLshort r)
glTexCoord3sv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord3sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glTexCoord4d	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord4d (GLdouble s, GLdouble t, GLdouble r, GLdouble q);$/;"	p	signature:(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
glTexCoord4dv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord4dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glTexCoord4f	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord4f (GLfloat s, GLfloat t, GLfloat r, GLfloat q);$/;"	p	signature:(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
glTexCoord4fv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord4fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glTexCoord4i	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord4i (GLint s, GLint t, GLint r, GLint q);$/;"	p	signature:(GLint s, GLint t, GLint r, GLint q)
glTexCoord4iv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord4iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glTexCoord4s	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord4s (GLshort s, GLshort t, GLshort r, GLshort q);$/;"	p	signature:(GLshort s, GLshort t, GLshort r, GLshort q)
glTexCoord4sv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoord4sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glTexCoordPointer	GL/gl.h	/^WINGDIAPI void APIENTRY glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);$/;"	p	signature:(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
glTexEnvf	GL/gl.h	/^WINGDIAPI void APIENTRY glTexEnvf (GLenum target, GLenum pname, GLfloat param);$/;"	p	signature:(GLenum target, GLenum pname, GLfloat param)
glTexEnvfv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexEnvfv (GLenum target, GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLfloat *params)
glTexEnvi	GL/gl.h	/^WINGDIAPI void APIENTRY glTexEnvi (GLenum target, GLenum pname, GLint param);$/;"	p	signature:(GLenum target, GLenum pname, GLint param)
glTexEnviv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexEnviv (GLenum target, GLenum pname, const GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLint *params)
glTexGend	GL/gl.h	/^WINGDIAPI void APIENTRY glTexGend (GLenum coord, GLenum pname, GLdouble param);$/;"	p	signature:(GLenum coord, GLenum pname, GLdouble param)
glTexGendv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexGendv (GLenum coord, GLenum pname, const GLdouble *params);$/;"	p	signature:(GLenum coord, GLenum pname, const GLdouble *params)
glTexGenf	GL/gl.h	/^WINGDIAPI void APIENTRY glTexGenf (GLenum coord, GLenum pname, GLfloat param);$/;"	p	signature:(GLenum coord, GLenum pname, GLfloat param)
glTexGenfv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexGenfv (GLenum coord, GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum coord, GLenum pname, const GLfloat *params)
glTexGeni	GL/gl.h	/^WINGDIAPI void APIENTRY glTexGeni (GLenum coord, GLenum pname, GLint param);$/;"	p	signature:(GLenum coord, GLenum pname, GLint param)
glTexGeniv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexGeniv (GLenum coord, GLenum pname, const GLint *params);$/;"	p	signature:(GLenum coord, GLenum pname, const GLint *params)
glTexImage1D	GL/gl.h	/^WINGDIAPI void APIENTRY glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
glTexImage2D	GL/gl.h	/^WINGDIAPI void APIENTRY glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
glTexParameterf	GL/gl.h	/^WINGDIAPI void APIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat param);$/;"	p	signature:(GLenum target, GLenum pname, GLfloat param)
glTexParameterfv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLfloat *params)
glTexParameteri	GL/gl.h	/^WINGDIAPI void APIENTRY glTexParameteri (GLenum target, GLenum pname, GLint param);$/;"	p	signature:(GLenum target, GLenum pname, GLint param)
glTexParameteriv	GL/gl.h	/^WINGDIAPI void APIENTRY glTexParameteriv (GLenum target, GLenum pname, const GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLint *params)
glTexSubImage1D	GL/gl.h	/^WINGDIAPI void APIENTRY glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
glTexSubImage2D	GL/gl.h	/^WINGDIAPI void APIENTRY glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
glTranslated	GL/gl.h	/^WINGDIAPI void APIENTRY glTranslated (GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLdouble x, GLdouble y, GLdouble z)
glTranslatef	GL/gl.h	/^WINGDIAPI void APIENTRY glTranslatef (GLfloat x, GLfloat y, GLfloat z);$/;"	p	signature:(GLfloat x, GLfloat y, GLfloat z)
glVertex2d	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex2d (GLdouble x, GLdouble y);$/;"	p	signature:(GLdouble x, GLdouble y)
glVertex2dv	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex2dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glVertex2f	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex2f (GLfloat x, GLfloat y);$/;"	p	signature:(GLfloat x, GLfloat y)
glVertex2fv	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex2fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glVertex2i	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex2i (GLint x, GLint y);$/;"	p	signature:(GLint x, GLint y)
glVertex2iv	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex2iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glVertex2s	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex2s (GLshort x, GLshort y);$/;"	p	signature:(GLshort x, GLshort y)
glVertex2sv	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex2sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glVertex3d	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex3d (GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLdouble x, GLdouble y, GLdouble z)
glVertex3dv	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex3dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glVertex3f	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex3f (GLfloat x, GLfloat y, GLfloat z);$/;"	p	signature:(GLfloat x, GLfloat y, GLfloat z)
glVertex3fv	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex3fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glVertex3i	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex3i (GLint x, GLint y, GLint z);$/;"	p	signature:(GLint x, GLint y, GLint z)
glVertex3iv	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex3iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glVertex3s	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex3s (GLshort x, GLshort y, GLshort z);$/;"	p	signature:(GLshort x, GLshort y, GLshort z)
glVertex3sv	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex3sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glVertex4d	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	p	signature:(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
glVertex4dv	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex4dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glVertex4f	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	p	signature:(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
glVertex4fv	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex4fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glVertex4i	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex4i (GLint x, GLint y, GLint z, GLint w);$/;"	p	signature:(GLint x, GLint y, GLint z, GLint w)
glVertex4iv	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex4iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glVertex4s	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex4s (GLshort x, GLshort y, GLshort z, GLshort w);$/;"	p	signature:(GLshort x, GLshort y, GLshort z, GLshort w)
glVertex4sv	GL/gl.h	/^WINGDIAPI void APIENTRY glVertex4sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glVertexPointer	GL/gl.h	/^WINGDIAPI void APIENTRY glVertexPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);$/;"	p	signature:(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
glViewport	GL/gl.h	/^WINGDIAPI void APIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height)
gluBeginCurve	GL/glu.h	/^void APIENTRY gluBeginCurve ($/;"	p	signature:( GLUnurbs *nobj)
gluBeginPolygon	GL/glu.h	/^void APIENTRY   gluBeginPolygon( GLUtesselator *tess );$/;"	p	signature:( GLUtesselator *tess )
gluBeginSurface	GL/glu.h	/^void APIENTRY gluBeginSurface ($/;"	p	signature:( GLUnurbs *nobj)
gluBeginTrim	GL/glu.h	/^void APIENTRY gluBeginTrim ($/;"	p	signature:( GLUnurbs *nobj)
gluBuild1DMipmaps	GL/glu.h	/^int APIENTRY gluBuild1DMipmaps ($/;"	p	signature:( GLenum target, GLint components, GLint width, GLenum format, GLenum type, const void *data)
gluBuild2DMipmaps	GL/glu.h	/^int APIENTRY gluBuild2DMipmaps ($/;"	p	signature:( GLenum target, GLint components, GLint width, GLint height, GLenum format, GLenum type, const void *data)
gluCylinder	GL/glu.h	/^void APIENTRY gluCylinder ($/;"	p	signature:( GLUquadric *qobj, GLdouble baseRadius, GLdouble topRadius, GLdouble height, GLint slices, GLint stacks)
gluDeleteNurbsRenderer	GL/glu.h	/^void APIENTRY gluDeleteNurbsRenderer ($/;"	p	signature:( GLUnurbs *nobj)
gluDeleteQuadric	GL/glu.h	/^void APIENTRY gluDeleteQuadric ($/;"	p	signature:( GLUquadric *state)
gluDeleteTess	GL/glu.h	/^void APIENTRY  gluDeleteTess(       $/;"	p	signature:( GLUtesselator *tess )
gluDisk	GL/glu.h	/^void APIENTRY gluDisk ($/;"	p	signature:( GLUquadric *qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops)
gluEndCurve	GL/glu.h	/^void APIENTRY gluEndCurve ($/;"	p	signature:( GLUnurbs *nobj)
gluEndPolygon	GL/glu.h	/^void APIENTRY   gluEndPolygon(   GLUtesselator *tess );$/;"	p	signature:( GLUtesselator *tess )
gluEndSurface	GL/glu.h	/^void APIENTRY gluEndSurface ($/;"	p	signature:( GLUnurbs *nobj)
gluEndTrim	GL/glu.h	/^void APIENTRY gluEndTrim ($/;"	p	signature:( GLUnurbs *nobj)
gluErrorString	GL/glu.h	/^const GLubyte* APIENTRY gluErrorString ($/;"	p	signature:( GLenum errCode)
gluErrorStringWIN	GL/glu.h	55;"	d
gluErrorStringWIN	GL/glu.h	57;"	d
gluErrorUnicodeStringEXT	GL/glu.h	/^const wchar_t* APIENTRY gluErrorUnicodeStringEXT ($/;"	p	signature:( GLenum errCode)
gluGetNurbsProperty	GL/glu.h	/^gluGetNurbsProperty ($/;"	p	signature:( GLUnurbs *nobj, GLenum property, GLfloat *value )
gluGetString	GL/glu.h	/^const GLubyte* APIENTRY gluGetString ($/;"	p	signature:( GLenum name)
gluGetTessProperty	GL/glu.h	/^void APIENTRY  gluGetTessProperty(  $/;"	p	signature:( GLUtesselator *tess, GLenum which, GLdouble *value )
gluLoadSamplingMatrices	GL/glu.h	/^gluLoadSamplingMatrices ($/;"	p	signature:( GLUnurbs *nobj, const GLfloat modelMatrix[16], const GLfloat projMatrix[16], const GLint viewport[4] )
gluLookAt	GL/glu.h	/^void APIENTRY gluLookAt ($/;"	p	signature:( GLdouble eyex, GLdouble eyey, GLdouble eyez, GLdouble centerx, GLdouble centery, GLdouble centerz, GLdouble upx, GLdouble upy, GLdouble upz)
gluNewNurbsRenderer	GL/glu.h	/^GLUnurbs* APIENTRY gluNewNurbsRenderer (void);$/;"	p	signature:(void)
gluNewQuadric	GL/glu.h	/^GLUquadric* APIENTRY gluNewQuadric (void);$/;"	p	signature:(void)
gluNewTess	GL/glu.h	/^GLUtesselator* APIENTRY  gluNewTess(          $/;"	p	signature:( void )
gluNextContour	GL/glu.h	/^void APIENTRY   gluNextContour(  GLUtesselator *tess, $/;"	p	signature:( GLUtesselator *tess, GLenum type )
gluNurbsCallback	GL/glu.h	/^gluNurbsCallback ($/;"	p	signature:( GLUnurbs *nobj, GLenum which, void (CALLBACK* fn)() )
gluNurbsCurve	GL/glu.h	/^void APIENTRY gluNurbsCurve ($/;"	p	signature:( GLUnurbs *nobj, GLint nknots, GLfloat *knot, GLint stride, GLfloat *ctlarray, GLint order, GLenum type)
gluNurbsProperty	GL/glu.h	/^gluNurbsProperty ($/;"	p	signature:( GLUnurbs *nobj, GLenum property, GLfloat value )
gluNurbsSurface	GL/glu.h	/^gluNurbsSurface(     $/;"	p	signature:( GLUnurbs *nobj, GLint sknot_count, float *sknot, GLint tknot_count, GLfloat *tknot, GLint s_stride, GLint t_stride, GLfloat *ctlarray, GLint sorder, GLint torder, GLenum type)
gluOrtho2D	GL/glu.h	/^void APIENTRY gluOrtho2D ($/;"	p	signature:( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top)
gluPartialDisk	GL/glu.h	/^void APIENTRY gluPartialDisk ($/;"	p	signature:( GLUquadric *qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops, GLdouble startAngle, GLdouble sweepAngle)
gluPerspective	GL/glu.h	/^void APIENTRY gluPerspective ($/;"	p	signature:( GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar)
gluPickMatrix	GL/glu.h	/^void APIENTRY gluPickMatrix ($/;"	p	signature:( GLdouble x, GLdouble y, GLdouble width, GLdouble height, GLint viewport[4])
gluProject	GL/glu.h	/^int APIENTRY gluProject ($/;"	p	signature:( GLdouble objx, GLdouble objy, GLdouble objz, const GLdouble modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *winx, GLdouble *winy, GLdouble *winz)
gluPwlCurve	GL/glu.h	/^void APIENTRY gluPwlCurve ($/;"	p	signature:( GLUnurbs *nobj, GLint count, GLfloat *array, GLint stride, GLenum type)
gluQuadricCallback	GL/glu.h	/^void APIENTRY gluQuadricCallback ($/;"	p	signature:( GLUquadric *qobj, GLenum which, void (CALLBACK* fn)())
gluQuadricDrawStyle	GL/glu.h	/^void APIENTRY gluQuadricDrawStyle ($/;"	p	signature:( GLUquadric *quadObject, GLenum drawStyle)
gluQuadricNormals	GL/glu.h	/^void APIENTRY gluQuadricNormals ($/;"	p	signature:( GLUquadric *quadObject, GLenum normals)
gluQuadricOrientation	GL/glu.h	/^void APIENTRY gluQuadricOrientation ($/;"	p	signature:( GLUquadric *quadObject, GLenum orientation)
gluQuadricTexture	GL/glu.h	/^void APIENTRY gluQuadricTexture ($/;"	p	signature:( GLUquadric *quadObject, GLboolean textureCoords)
gluScaleImage	GL/glu.h	/^int APIENTRY gluScaleImage ($/;"	p	signature:( GLenum format, GLint widthin, GLint heightin, GLenum typein, const void *datain, GLint widthout, GLint heightout, GLenum typeout, void *dataout)
gluSphere	GL/glu.h	/^void APIENTRY gluSphere ($/;"	p	signature:( GLUquadric *qobj, GLdouble radius, GLint slices, GLint stacks)
gluTessBeginContour	GL/glu.h	/^void APIENTRY  gluTessBeginContour( $/;"	p	signature:( GLUtesselator *tess )
gluTessBeginPolygon	GL/glu.h	/^void APIENTRY  gluTessBeginPolygon( $/;"	p	signature:( GLUtesselator *tess, void *polygon_data )
gluTessCallback	GL/glu.h	/^void APIENTRY  gluTessCallback(     $/;"	p	signature:( GLUtesselator *tess, GLenum which, void (CALLBACK *fn)())
gluTessEndContour	GL/glu.h	/^void APIENTRY  gluTessEndContour(   $/;"	p	signature:( GLUtesselator *tess )
gluTessEndPolygon	GL/glu.h	/^void APIENTRY  gluTessEndPolygon(   $/;"	p	signature:( GLUtesselator *tess )
gluTessNormal	GL/glu.h	/^void APIENTRY  gluTessNormal(       $/;"	p	signature:( GLUtesselator *tess, GLdouble x, GLdouble y, GLdouble z )
gluTessProperty	GL/glu.h	/^void APIENTRY  gluTessProperty(     $/;"	p	signature:( GLUtesselator *tess, GLenum which, GLdouble value )
gluTessVertex	GL/glu.h	/^void APIENTRY  gluTessVertex(       $/;"	p	signature:( GLUtesselator *tess, GLdouble coords[3], void *data )
gluUnProject	GL/glu.h	/^int APIENTRY gluUnProject ($/;"	p	signature:( GLdouble winx, GLdouble winy, GLdouble winz, const GLdouble modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *objx, GLdouble *objy, GLdouble *objz)
glutAddMenuEntry	GL/glut.h	/^GLUTAPI void APIENTRY glutAddMenuEntry(const char *label, int value);$/;"	p	signature:(const char *label, int value)
glutAddSubMenu	GL/glut.h	/^GLUTAPI void APIENTRY glutAddSubMenu(const char *label, int submenu);$/;"	p	signature:(const char *label, int submenu)
glutAttachMenu	GL/glut.h	/^GLUTAPI void APIENTRY glutAttachMenu(int button);$/;"	p	signature:(int button)
glutBitmap8By13	GL/glut.h	/^GLUTAPI void *glutBitmap8By13;$/;"	v
glutBitmap9By15	GL/glut.h	/^GLUTAPI void *glutBitmap9By15;$/;"	v
glutBitmapCharacter	GL/glut.h	/^GLUTAPI void APIENTRY glutBitmapCharacter(void *font, int character);$/;"	p	signature:(void *font, int character)
glutBitmapHelvetica10	GL/glut.h	/^GLUTAPI void *glutBitmapHelvetica10;$/;"	v
glutBitmapHelvetica12	GL/glut.h	/^GLUTAPI void *glutBitmapHelvetica12;$/;"	v
glutBitmapHelvetica18	GL/glut.h	/^GLUTAPI void *glutBitmapHelvetica18;$/;"	v
glutBitmapLength	GL/glut.h	/^GLUTAPI int APIENTRY glutBitmapLength(void *font, const unsigned char *string);$/;"	p	signature:(void *font, const unsigned char *string)
glutBitmapTimesRoman10	GL/glut.h	/^GLUTAPI void *glutBitmapTimesRoman10;$/;"	v
glutBitmapTimesRoman24	GL/glut.h	/^GLUTAPI void *glutBitmapTimesRoman24;$/;"	v
glutBitmapWidth	GL/glut.h	/^GLUTAPI int APIENTRY glutBitmapWidth(void *font, int character);$/;"	p	signature:(void *font, int character)
glutButtonBoxFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutButtonBoxFunc(void (GLUTCALLBACK *func)(int button, int state));$/;"	p	signature:(void (GLUTCALLBACK *func)(int button, int state))
glutChangeToMenuEntry	GL/glut.h	/^GLUTAPI void APIENTRY glutChangeToMenuEntry(int item, const char *label, int value);$/;"	p	signature:(int item, const char *label, int value)
glutChangeToSubMenu	GL/glut.h	/^GLUTAPI void APIENTRY glutChangeToSubMenu(int item, const char *label, int submenu);$/;"	p	signature:(int item, const char *label, int submenu)
glutCopyColormap	GL/glut.h	/^GLUTAPI void APIENTRY glutCopyColormap(int win);$/;"	p	signature:(int win)
glutCreateMenu	GL/glut.h	/^GLUTAPI int APIENTRY glutCreateMenu(void (GLUTCALLBACK *func)(int));$/;"	p	signature:(void (GLUTCALLBACK *func)(int))
glutCreateMenu	GL/glut.h	550;"	d
glutCreateMenu_ATEXIT_HACK	GL/glut.h	/^static int APIENTRY glutCreateMenu_ATEXIT_HACK(void (GLUTCALLBACK *func)(int)) { return __glutCreateMenuWithExit(func, exit); }$/;"	f	signature:(void (GLUTCALLBACK *func)(int))
glutCreateSubWindow	GL/glut.h	/^GLUTAPI int APIENTRY glutCreateSubWindow(int win, int x, int y, int width, int height);$/;"	p	signature:(int win, int x, int y, int width, int height)
glutCreateWindow	GL/glut.h	/^GLUTAPI int APIENTRY glutCreateWindow(const char *title);$/;"	p	signature:(const char *title)
glutCreateWindow	GL/glut.h	504;"	d
glutCreateWindow_ATEXIT_HACK	GL/glut.h	/^static int APIENTRY glutCreateWindow_ATEXIT_HACK(const char *title) { return __glutCreateWindowWithExit(title, exit); }$/;"	f	signature:(const char *title)
glutDestroyMenu	GL/glut.h	/^GLUTAPI void APIENTRY glutDestroyMenu(int menu);$/;"	p	signature:(int menu)
glutDestroyWindow	GL/glut.h	/^GLUTAPI void APIENTRY glutDestroyWindow(int win);$/;"	p	signature:(int win)
glutDetachMenu	GL/glut.h	/^GLUTAPI void APIENTRY glutDetachMenu(int button);$/;"	p	signature:(int button)
glutDeviceGet	GL/glut.h	/^GLUTAPI int APIENTRY glutDeviceGet(GLenum type);$/;"	p	signature:(GLenum type)
glutDialsFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutDialsFunc(void (GLUTCALLBACK *func)(int dial, int value));$/;"	p	signature:(void (GLUTCALLBACK *func)(int dial, int value))
glutDisplayFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutDisplayFunc(void (GLUTCALLBACK *func)(void));$/;"	p	signature:(void (GLUTCALLBACK *func)(void))
glutEnterGameMode	GL/glut.h	/^GLUTAPI int APIENTRY glutEnterGameMode(void);$/;"	p	signature:(void)
glutEntryFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutEntryFunc(void (GLUTCALLBACK *func)(int state));$/;"	p	signature:(void (GLUTCALLBACK *func)(int state))
glutEstablishOverlay	GL/glut.h	/^GLUTAPI void APIENTRY glutEstablishOverlay(void);$/;"	p	signature:(void)
glutExtensionSupported	GL/glut.h	/^GLUTAPI int APIENTRY glutExtensionSupported(const char *name);$/;"	p	signature:(const char *name)
glutForceJoystickFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutForceJoystickFunc(void);$/;"	p	signature:(void)
glutFullScreen	GL/glut.h	/^GLUTAPI void APIENTRY glutFullScreen(void);$/;"	p	signature:(void)
glutGameModeGet	GL/glut.h	/^GLUTAPI int APIENTRY glutGameModeGet(GLenum mode);$/;"	p	signature:(GLenum mode)
glutGameModeString	GL/glut.h	/^GLUTAPI void APIENTRY glutGameModeString(const char *string);$/;"	p	signature:(const char *string)
glutGet	GL/glut.h	/^GLUTAPI int APIENTRY glutGet(GLenum type);$/;"	p	signature:(GLenum type)
glutGetColor	GL/glut.h	/^GLUTAPI GLfloat APIENTRY glutGetColor(int ndx, int component);$/;"	p	signature:(int ndx, int component)
glutGetMenu	GL/glut.h	/^GLUTAPI int APIENTRY glutGetMenu(void);$/;"	p	signature:(void)
glutGetModifiers	GL/glut.h	/^GLUTAPI int APIENTRY glutGetModifiers(void);$/;"	p	signature:(void)
glutGetWindow	GL/glut.h	/^GLUTAPI int APIENTRY glutGetWindow(void);$/;"	p	signature:(void)
glutHideOverlay	GL/glut.h	/^GLUTAPI void APIENTRY glutHideOverlay(void);$/;"	p	signature:(void)
glutHideWindow	GL/glut.h	/^GLUTAPI void APIENTRY glutHideWindow(void);$/;"	p	signature:(void)
glutIconifyWindow	GL/glut.h	/^GLUTAPI void APIENTRY glutIconifyWindow(void);$/;"	p	signature:(void)
glutIdleFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutIdleFunc(void (GLUTCALLBACK *func)(void));$/;"	p	signature:(void (GLUTCALLBACK *func)(void))
glutIgnoreKeyRepeat	GL/glut.h	/^GLUTAPI void APIENTRY glutIgnoreKeyRepeat(int ignore);$/;"	p	signature:(int ignore)
glutInit	GL/glut.h	/^GLUTAPI void APIENTRY glutInit(int *argcp, char **argv);$/;"	p	signature:(int *argcp, char **argv)
glutInit	GL/glut.h	487;"	d
glutInitDisplayMode	GL/glut.h	/^GLUTAPI void APIENTRY glutInitDisplayMode(unsigned int mode);$/;"	p	signature:(unsigned int mode)
glutInitDisplayString	GL/glut.h	/^GLUTAPI void APIENTRY glutInitDisplayString(const char *string);$/;"	p	signature:(const char *string)
glutInitWindowPosition	GL/glut.h	/^GLUTAPI void APIENTRY glutInitWindowPosition(int x, int y);$/;"	p	signature:(int x, int y)
glutInitWindowSize	GL/glut.h	/^GLUTAPI void APIENTRY glutInitWindowSize(int width, int height);$/;"	p	signature:(int width, int height)
glutInit_ATEXIT_HACK	GL/glut.h	/^static void APIENTRY glutInit_ATEXIT_HACK(int *argcp, char **argv) { __glutInitWithExit(argcp, argv, exit); }$/;"	f	signature:(int *argcp, char **argv)
glutJoystickFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutJoystickFunc(void (GLUTCALLBACK *func)(unsigned int buttonMask, int x, int y, int z), int pollInterval);$/;"	p	signature:(void (GLUTCALLBACK *func)(unsigned int buttonMask, int x, int y, int z), int pollInterval)
glutKeyboardFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutKeyboardFunc(void (GLUTCALLBACK *func)(unsigned char key, int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(unsigned char key, int x, int y))
glutKeyboardUpFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutKeyboardUpFunc(void (GLUTCALLBACK *func)(unsigned char key, int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(unsigned char key, int x, int y))
glutLayerGet	GL/glut.h	/^GLUTAPI int APIENTRY glutLayerGet(GLenum type);$/;"	p	signature:(GLenum type)
glutLeaveGameMode	GL/glut.h	/^GLUTAPI void APIENTRY glutLeaveGameMode(void);$/;"	p	signature:(void)
glutMainLoop	GL/glut.h	/^GLUTAPI void APIENTRY glutMainLoop(void);$/;"	p	signature:(void)
glutMenuStateFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutMenuStateFunc(void (GLUTCALLBACK *func)(int state));$/;"	p	signature:(void (GLUTCALLBACK *func)(int state))
glutMenuStatusFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutMenuStatusFunc(void (GLUTCALLBACK *func)(int status, int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int status, int x, int y))
glutMotionFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutMotionFunc(void (GLUTCALLBACK *func)(int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int x, int y))
glutMouseFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutMouseFunc(void (GLUTCALLBACK *func)(int button, int state, int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int button, int state, int x, int y))
glutOverlayDisplayFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutOverlayDisplayFunc(void (GLUTCALLBACK *func)(void));$/;"	p	signature:(void (GLUTCALLBACK *func)(void))
glutPassiveMotionFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutPassiveMotionFunc(void (GLUTCALLBACK *func)(int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int x, int y))
glutPopWindow	GL/glut.h	/^GLUTAPI void APIENTRY glutPopWindow(void);$/;"	p	signature:(void)
glutPositionWindow	GL/glut.h	/^GLUTAPI void APIENTRY glutPositionWindow(int x, int y);$/;"	p	signature:(int x, int y)
glutPostOverlayRedisplay	GL/glut.h	/^GLUTAPI void APIENTRY glutPostOverlayRedisplay(void);$/;"	p	signature:(void)
glutPostRedisplay	GL/glut.h	/^GLUTAPI void APIENTRY glutPostRedisplay(void);$/;"	p	signature:(void)
glutPostWindowOverlayRedisplay	GL/glut.h	/^GLUTAPI void APIENTRY glutPostWindowOverlayRedisplay(int win);$/;"	p	signature:(int win)
glutPostWindowRedisplay	GL/glut.h	/^GLUTAPI void APIENTRY glutPostWindowRedisplay(int win);$/;"	p	signature:(int win)
glutPushWindow	GL/glut.h	/^GLUTAPI void APIENTRY glutPushWindow(void);$/;"	p	signature:(void)
glutRemoveMenuItem	GL/glut.h	/^GLUTAPI void APIENTRY glutRemoveMenuItem(int item);$/;"	p	signature:(int item)
glutRemoveOverlay	GL/glut.h	/^GLUTAPI void APIENTRY glutRemoveOverlay(void);$/;"	p	signature:(void)
glutReportErrors	GL/glut.h	/^GLUTAPI void APIENTRY glutReportErrors(void);$/;"	p	signature:(void)
glutReshapeFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutReshapeFunc(void (GLUTCALLBACK *func)(int width, int height));$/;"	p	signature:(void (GLUTCALLBACK *func)(int width, int height))
glutReshapeWindow	GL/glut.h	/^GLUTAPI void APIENTRY glutReshapeWindow(int width, int height);$/;"	p	signature:(int width, int height)
glutSetColor	GL/glut.h	/^GLUTAPI void APIENTRY glutSetColor(int, GLfloat red, GLfloat green, GLfloat blue);$/;"	p	signature:(int, GLfloat red, GLfloat green, GLfloat blue)
glutSetCursor	GL/glut.h	/^GLUTAPI void APIENTRY glutSetCursor(int cursor);$/;"	p	signature:(int cursor)
glutSetIconTitle	GL/glut.h	/^GLUTAPI void APIENTRY glutSetIconTitle(const char *title);$/;"	p	signature:(const char *title)
glutSetKeyRepeat	GL/glut.h	/^GLUTAPI void APIENTRY glutSetKeyRepeat(int repeatMode);$/;"	p	signature:(int repeatMode)
glutSetMenu	GL/glut.h	/^GLUTAPI void APIENTRY glutSetMenu(int menu);$/;"	p	signature:(int menu)
glutSetWindow	GL/glut.h	/^GLUTAPI void APIENTRY glutSetWindow(int win);$/;"	p	signature:(int win)
glutSetWindowTitle	GL/glut.h	/^GLUTAPI void APIENTRY glutSetWindowTitle(const char *title);$/;"	p	signature:(const char *title)
glutSetupVideoResizing	GL/glut.h	/^GLUTAPI void APIENTRY glutSetupVideoResizing(void);$/;"	p	signature:(void)
glutShowOverlay	GL/glut.h	/^GLUTAPI void APIENTRY glutShowOverlay(void);$/;"	p	signature:(void)
glutShowWindow	GL/glut.h	/^GLUTAPI void APIENTRY glutShowWindow(void);$/;"	p	signature:(void)
glutSolidCone	GL/glut.h	/^GLUTAPI void APIENTRY glutSolidCone(GLdouble base, GLdouble height, GLint slices, GLint stacks);$/;"	p	signature:(GLdouble base, GLdouble height, GLint slices, GLint stacks)
glutSolidCube	GL/glut.h	/^GLUTAPI void APIENTRY glutSolidCube(GLdouble size);$/;"	p	signature:(GLdouble size)
glutSolidDodecahedron	GL/glut.h	/^GLUTAPI void APIENTRY glutSolidDodecahedron(void);$/;"	p	signature:(void)
glutSolidIcosahedron	GL/glut.h	/^GLUTAPI void APIENTRY glutSolidIcosahedron(void);$/;"	p	signature:(void)
glutSolidOctahedron	GL/glut.h	/^GLUTAPI void APIENTRY glutSolidOctahedron(void);$/;"	p	signature:(void)
glutSolidSphere	GL/glut.h	/^GLUTAPI void APIENTRY glutSolidSphere(GLdouble radius, GLint slices, GLint stacks);$/;"	p	signature:(GLdouble radius, GLint slices, GLint stacks)
glutSolidTeapot	GL/glut.h	/^GLUTAPI void APIENTRY glutSolidTeapot(GLdouble size);$/;"	p	signature:(GLdouble size)
glutSolidTetrahedron	GL/glut.h	/^GLUTAPI void APIENTRY glutSolidTetrahedron(void);$/;"	p	signature:(void)
glutSolidTorus	GL/glut.h	/^GLUTAPI void APIENTRY glutSolidTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings);$/;"	p	signature:(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings)
glutSpaceballButtonFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutSpaceballButtonFunc(void (GLUTCALLBACK *func)(int button, int state));$/;"	p	signature:(void (GLUTCALLBACK *func)(int button, int state))
glutSpaceballMotionFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutSpaceballMotionFunc(void (GLUTCALLBACK *func)(int x, int y, int z));$/;"	p	signature:(void (GLUTCALLBACK *func)(int x, int y, int z))
glutSpaceballRotateFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutSpaceballRotateFunc(void (GLUTCALLBACK *func)(int x, int y, int z));$/;"	p	signature:(void (GLUTCALLBACK *func)(int x, int y, int z))
glutSpecialFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutSpecialFunc(void (GLUTCALLBACK *func)(int key, int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int key, int x, int y))
glutSpecialUpFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutSpecialUpFunc(void (GLUTCALLBACK *func)(int key, int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int key, int x, int y))
glutStopVideoResizing	GL/glut.h	/^GLUTAPI void APIENTRY glutStopVideoResizing(void);$/;"	p	signature:(void)
glutStrokeCharacter	GL/glut.h	/^GLUTAPI void APIENTRY glutStrokeCharacter(void *font, int character);$/;"	p	signature:(void *font, int character)
glutStrokeLength	GL/glut.h	/^GLUTAPI int APIENTRY glutStrokeLength(void *font, const unsigned char *string);$/;"	p	signature:(void *font, const unsigned char *string)
glutStrokeMonoRoman	GL/glut.h	/^GLUTAPI void *glutStrokeMonoRoman;$/;"	v
glutStrokeRoman	GL/glut.h	/^GLUTAPI void *glutStrokeRoman;$/;"	v
glutStrokeWidth	GL/glut.h	/^GLUTAPI int APIENTRY glutStrokeWidth(void *font, int character);$/;"	p	signature:(void *font, int character)
glutSwapBuffers	GL/glut.h	/^GLUTAPI void APIENTRY glutSwapBuffers(void);$/;"	p	signature:(void)
glutTabletButtonFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutTabletButtonFunc(void (GLUTCALLBACK *func)(int button, int state, int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int button, int state, int x, int y))
glutTabletMotionFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutTabletMotionFunc(void (GLUTCALLBACK *func)(int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int x, int y))
glutTimerFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutTimerFunc(unsigned int millis, void (GLUTCALLBACK *func)(int value), int value);$/;"	p	signature:(unsigned int millis, void (GLUTCALLBACK *func)(int value), int value)
glutUseLayer	GL/glut.h	/^GLUTAPI void APIENTRY glutUseLayer(GLenum layer);$/;"	p	signature:(GLenum layer)
glutVideoPan	GL/glut.h	/^GLUTAPI void APIENTRY glutVideoPan(int x, int y, int width, int height);$/;"	p	signature:(int x, int y, int width, int height)
glutVideoResize	GL/glut.h	/^GLUTAPI void APIENTRY glutVideoResize(int x, int y, int width, int height);$/;"	p	signature:(int x, int y, int width, int height)
glutVideoResizeGet	GL/glut.h	/^GLUTAPI int APIENTRY glutVideoResizeGet(GLenum param);$/;"	p	signature:(GLenum param)
glutVisibilityFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutVisibilityFunc(void (GLUTCALLBACK *func)(int state));$/;"	p	signature:(void (GLUTCALLBACK *func)(int state))
glutWarpPointer	GL/glut.h	/^GLUTAPI void APIENTRY glutWarpPointer(int x, int y);$/;"	p	signature:(int x, int y)
glutWindowStatusFunc	GL/glut.h	/^GLUTAPI void APIENTRY glutWindowStatusFunc(void (GLUTCALLBACK *func)(int state));$/;"	p	signature:(void (GLUTCALLBACK *func)(int state))
glutWireCone	GL/glut.h	/^GLUTAPI void APIENTRY glutWireCone(GLdouble base, GLdouble height, GLint slices, GLint stacks);$/;"	p	signature:(GLdouble base, GLdouble height, GLint slices, GLint stacks)
glutWireCube	GL/glut.h	/^GLUTAPI void APIENTRY glutWireCube(GLdouble size);$/;"	p	signature:(GLdouble size)
glutWireDodecahedron	GL/glut.h	/^GLUTAPI void APIENTRY glutWireDodecahedron(void);$/;"	p	signature:(void)
glutWireIcosahedron	GL/glut.h	/^GLUTAPI void APIENTRY glutWireIcosahedron(void);$/;"	p	signature:(void)
glutWireOctahedron	GL/glut.h	/^GLUTAPI void APIENTRY glutWireOctahedron(void);$/;"	p	signature:(void)
glutWireSphere	GL/glut.h	/^GLUTAPI void APIENTRY glutWireSphere(GLdouble radius, GLint slices, GLint stacks);$/;"	p	signature:(GLdouble radius, GLint slices, GLint stacks)
glutWireTeapot	GL/glut.h	/^GLUTAPI void APIENTRY glutWireTeapot(GLdouble size);$/;"	p	signature:(GLdouble size)
glutWireTetrahedron	GL/glut.h	/^GLUTAPI void APIENTRY glutWireTetrahedron(void);$/;"	p	signature:(void)
glutWireTorus	GL/glut.h	/^GLUTAPI void APIENTRY glutWireTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings);$/;"	p	signature:(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings)
sizeX	GL/glaux.h	/^    GLint sizeX, sizeY;$/;"	m	struct:_AUX_RGBImageRec	access:public
sizeY	GL/glaux.h	/^    GLint sizeX, sizeY;$/;"	m	struct:_AUX_RGBImageRec	access:public
