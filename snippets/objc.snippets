# #import <...>
snippet imp
	#import <${1:Cocoa/Cocoa.h}>${2}
# #import "..."
snippet Imp
	#import "${1:`Filename()`.h}"${2}
# @selector(...)
snippet sel
	@selector(${1:method}:)${3}
# NSLog(...)
snippet log
	NSLog(@"${1}"${2});${3}
# Class
snippet objc
	@interface ${1:`Filename('', 'object')`} : ${2:NSObject}
	{
	}
	@end
	
	@implementation $1
	- (id) init
	{
		if (self = [super init])
# Class Interface
snippet clh
	@interface ${1:ClassName} : ${2:NSObject}
	{${3}
	}
	${4}
	@end
snippet ibo
	IBOutlet ${1:NSSomeClass} *${2:$1};
# Category
snippet cat
	@interface ${1:NSObject} (${2:Category})
	@end
	
	@implementation $1 ($2)
	${3}
	@end
# Category Interface
snippet cath
	@interface ${1:NSObject} (${2:Category})
	${3}
	@end
# NSArray
snippet array
	NSMutableArray *${1:array} = [NSMutable array];${2}
# NSDictionary
snippet dict
	NSMutableDictionary *${1:dict} = [NSMutableDictionary dictionary];${2}
# NSBezierPath
snippet bez
	NSBezierPath *${1:path} = [NSBezierPath bezierPath];${2}
# Method
snippet m
	- (${1:id})${2:method}
	{
		${3:return self;}
	}
# Method declaration
snippet md
	- (${1:id})${2:method};${3}
# Class Method
snippet M
	+ (${1:id})${2:method}
	{${3}
		return nil;
	}
# Sub-method (Call super)
snippet sm
	- (${1:id})${2:method}
	{
		[super $2];${3}
		return self;
	}
# Method: Initialize
snippet I
	+ (void) initialize
	{
		[[NSUserDefaults standardUserDefaults] registerDefaults:[NSDictionary dictionaryWIthObjectsAndKeys:
			${1}@"value", @"key",
			nil]];
	}
# Accessor Methods For:
# Object
snippet objacc
	- (${1:id})${2:thing}
	{
		return $2;
	}
	
	- (void) set$2:($1)
	{
		$1 old$2 = $2;
		$2 = [aValue retain];
		[old$2 release];
	}
snippet forarray
	unsigned int	${1:object}Count = [${2:array} count];
	
	for (unsigned int index = 0; index < $1Count; index++)
	{
		${3:id}	$1 = [$2 $1AtIndex:index];
		${4}
	}
# IBOutlet
# @property (Objective-C 2.0)
snippet prop
	@property (${1:retain}) ${2:NSSomeClass} *${3:$2};${4}
# @synthesize (Objective-C 2.0)
snippet syn
	@synthesize ${1:NSSomeClass};${2}
# [[ alloc] init]
snippet alloc
	[[${1:foo} alloc] init]${2};${3}
# retain
snippet ret
	[${1:foo} retain];${2}
# release
snippet rel
	[${1:foo} release];${2}
# C snippets
# main()
snippet main
	int
	main(int argc, char* argv[])
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper(substitute(expand('%:t:r'), '\\W\+\\|\\([a-z]\\)\\@<=\\([A-Z]\\)', '_&', 'g')) . '_H'`}
	#define $1
	
	${2}
	
	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet el
	else {
		${1}
	}
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (${1}; ${2}; ${3}) {
		${4:/* code */}
	}
# Function
snippet func
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
