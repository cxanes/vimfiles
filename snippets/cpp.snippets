# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = 
	fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
snippet using
	using namespace ${1:std};${2}
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3:/* data */}
	};
# typename
snippet tn
	<typename ${1:type}>
	${2}
# C snippets
# main()
snippet main
	int
	main(int argc, char* argv[])
	{
		${1}
		return 0;
	}
# #include <...>
snippet Inc
	#include <${1:iostream}>${2}
# #include "..."
snippet inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper(substitute(expand('%:t:r'), '\\W\+\\|\\([a-z]\\)\\@<=\\([A-Z]\\)', '_&', 'g')) . '_H'`}
	#define $1
	
	${2}
	
	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet el
	else {
		${1}
	}
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (${1}; ${2}; ${3}) {
		${4:/* code */}
	}
# Function
snippet func
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
